Repair : math_4
Current failed test : org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1 | 2019.09.04 AD at 16:05:38 CDT
Location : org.apache.commons.math3.geometry.euclidean.threed.SubLine.SubLine:[56, 57]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 16:07:50 CDT - 2019.09.04 AD at 16:12:23 CDT , PNumber : 11280, CandNumber : 16 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:12:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+start=start;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+end=start;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+start=end;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+end=end;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+end.add(start);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3832/pattern-ver1-serial/src.miningChanges.ObtainVSMScore.java-updateCorpusNL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+start.add(end);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3832/pattern-ver1-serial/src.miningChanges.ObtainVSMScore.java-updateCorpusNL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:14:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+assert (start!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+assert (end!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[49,57]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
 this(new Line(start,end),buildIntervalSet(start,end));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:15:14 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.SubLine.intersection:[113, 116]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 16:16:59 CDT - 2019.09.04 AD at 16:39:52 CDT , PNumber : 11436, CandNumber : 123 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
-Vector3D v1D=line.intersection(subLine.line);
+ Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+ Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
-if(includeEndPoints){
+if(false){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4923/pattern-ver1-serial/src.ClueBoard.ComputerPlayer.java-takeTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
-Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+ final Vector3D v1D=line.intersection(subLine.line);
+ final Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
-Vector3D v1D=line.intersection(subLine.line);
+ final Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
-Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+ final Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
-Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+ final Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+ final Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
-Vector3D v1D=line.intersection(subLine.line);
+Vector3D v1D=this.line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+Location loc1=remainingRegion.checkPoint(this.line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+Location loc1=this.remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
-public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+public Vector3D intersection(SubLine subLine,boolean broadcast){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
-if(includeEndPoints){
+if(broadcast){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+synchronized(this){
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+subLine=this;
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+subLine=subLine;
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+v1D=v1D;
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
-if(includeEndPoints){
+if(includeEndPoints&&includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+int a=0;
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
-public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+public Vector3D intersection(SubLine subLine,boolean readOnly){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
-if(includeEndPoints){
+if(!readOnly){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+String OUTSTRING="";
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(equals(subLine)){
+return null;
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(equals(v1D)){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+if(equals(loc1)){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+if(equals(loc1)){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(equals(loc1)){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+int indexSelection=0;
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
-return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
+return (includeEndPoints&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+int a=1;
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+boolean b=true;
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+if(v1D==null){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+if(v1D==null){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Solution---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(v1D==null){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine==null){
+return null;
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+if(loc1==null){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+if(loc1==null){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(line==null){
+return null;
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(line==null){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(remainingRegion==null){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine.line==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine.remainingRegion==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1==remainingRegion.checkPoint(line.toSubSpace(v1D))){
+return v1D;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D))){
+return v1D;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(v1D==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc1==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if("&null".equals(v1D)){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if("&null".equals(subLine)){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if("&null".equals(includeEndPoints)){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if("&null".equals(loc1)){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if("&null".equals(loc2)){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(v1D.equals("-1")){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1.equals("-1")){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2.equals("-1")){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+assert (v1D!=null);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+assert (subLine!=null);
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+assert (v1D!=null);
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+assert (v1D!=null);
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+assert (loc1!=null);
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+assert (loc1!=null);
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+assert (loc1!=null);
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+assert (loc2!=null);
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(line.contains(v1D)){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(subLine.equals(InputStream.class)){
+return v1D;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1.equals(InputStream.class)){
+return v1D;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2.equals(InputStream.class)){
+return v1D;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine.line.contains(v1D)){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine!=null){
+Vector3D v1D=line.intersection(subLine.line);
+Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(includeEndPoints){
+return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
+}else {
+return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
+}
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+assert (v1D!=line.intersection(subLine.line));
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+assert (loc1!=remainingRegion.checkPoint(line.toSubSpace(v1D)));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+assert (loc2!=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D)));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+assert (subLine!=null);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(v1D.equals("655")){
+System.out.println();
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(v1D.equals("655")){
+System.out.println();
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D.equals("655")){
+System.out.println();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc1.equals("655")){
+System.out.println();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+Location loc1=remainingRegion.checkPoint(line==null?null:line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
-Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+Location loc1=remainingRegion.checkPoint(line!=null?line.toSubSpace(v1D):null);
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+assert (v1D!=null):"Appointments day is not allowed to be null!";
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+assert (v1D!=null):"Appointments day is not allowed to be null!";
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+assert (v1D!=null):"Appointments day is not allowed to be null!";
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+assert (subLine!=null):"Appointments day is not allowed to be null!";
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+assert (loc2!=null):"Appointments day is not allowed to be null!";
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(line==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(line==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(remainingRegion==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine.line==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine.remainingRegion==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine.line==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(v1D==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(line.toSubSpace(v1D)==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(v1D==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+boolean haveBreadCrumbs=false;
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
-if(includeEndPoints){
+if(includeEndPoints&&haveBreadCrumbs){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
+if(v1D==null){
+throw new IllegalStateException("User isn't registered! "+subLine);
+}
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1==null){
+throw new IllegalStateException("User isn't registered! "+v1D);
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null){
+throw new IllegalStateException("User isn't registered! "+v1D);
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null){
+throw new IllegalStateException("User isn't registered! "+subLine);
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null||loc1==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc1==null||v1D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null||loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null||v1D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc1==null||loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null||loc1==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
-return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
+return v1D;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
-return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
+return v1D;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(subLine==null||v1D==null){
+throw new NullPointerException();
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null||loc1==null){
+throw new NullPointerException();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null||loc2==null){
+throw new NullPointerException();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc1==null||v1D==null){
+throw new NullPointerException();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+if(loc1==null||loc2==null){
+throw new NullPointerException();
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
+if(loc2==null||loc1==null){
+throw new NullPointerException();
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+if(loc1==null||loc2==null){
+throw new NullPointerException();
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
+if(loc2==null||loc1==null){
+throw new NullPointerException();
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(v1D==null||loc1==null||subLine==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(v1D==null||loc2==null||subLine==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
+if(loc1==null||v1D==null||subLine==null){
+return null;
+}
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+if(loc2==null||v1D==null||subLine==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[96,127]
------------Candidate---------------
 public Vector3D intersection(SubLine subLine,boolean includeEndPoints){
+long startTime=System.currentTimeMillis();
 Vector3D v1D=line.intersection(subLine.line);
 Location loc1=remainingRegion.checkPoint(line.toSubSpace(v1D));
 Location loc2=subLine.remainingRegion.checkPoint(subLine.line.toSubSpace(v1D));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v1D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v1D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:48:24 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.contains:[156]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 16:50:10 CDT - 2019.09.04 AD at 16:53:56 CDT , PNumber : 11429, CandNumber : 14 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return p.distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:55:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return distance(p)>1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/2886/pattern-ver1-serial/src.main.java.model.cards.zombies.Bite.java-rateSelection.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+int a=0;
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+String OUTSTRING="";
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+if(equals(p)){
+return false;
+}
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+int a=1;
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+boolean b=true;
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
+import java.util.Collections;
+
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 16:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return -distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:01:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+assert (p!=null);
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+if(p!=null){
+return distance(p)<1.0E-10;
+}
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:01:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
-return distance(p)<1.0E-10;
+return (boolean)(distance(p)<1.0E-10);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[151,157]
------------Candidate---------------
 public boolean contains(Vector3D p){
+assert (p!=null):"Appointments day is not allowed to be null!";
 return distance(p)<1.0E-10;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:01:23 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.distance:[164, 165, 166]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 17:03:07 CDT - 2019.09.04 AD at 17:10:30 CDT , PNumber : 11284, CandNumber : 83 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+ Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(p,direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(d,direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return d.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-p.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return p.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction,p),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6885/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.gateway.src.main.java.org.wso2.carbon.apimgt.gateway.handlers.logging.APILogMessageHandler.java-mediate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction,d),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6885/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.gateway.src.main.java.org.wso2.carbon.apimgt.gateway.handlers.logging.APILogMessageHandler.java-mediate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+ final Vector3D d=p.subtract(1,zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+ final Vector3D d=p.add(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ Vector3D d=p.subtract(zero);
+ Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return (double)n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D valueAnimator){
+ final Vector3D d=valueAnimator.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3559/pattern-ver1-serial/library.src.main.java.qiu.niorgai.StatusBarCompatLollipop.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return -n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+distance(d);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+distance(p);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+distance(n);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D edge){
+ final Vector3D d=edge.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1943/pattern-ver1-serial/violet-framework.src.main.java.com.horstmann.violet.product.diagram.abstracts.node.AbstractNode.java-addConnection.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D methodOpeningBrace){
+ final Vector3D d=methodOpeningBrace.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-hasTryFinallyBlock.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D mpR){
+ final Vector3D d=mpR.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/2030/pattern-ver1-serial/app.src.main.java.com.example.andreas.mainview.slashy.SlashyActivity.java-onCompletion.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return (double)(n.getNorm());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D methodAST){
+ final Vector3D d=methodAST.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck.java-isMainMethodParameters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:15:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D managerFactory){
+ final Vector3D d=managerFactory.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1774/pattern-ver1-serial/src.main.java.com.spontaneous.server.SpontaneousApplication.java-sessionFactory.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:15:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2568/pattern-ver1-serial/driver.src.main.java.org.neo4j.driver.v1.internal.value.BooleanValue.java-javaFloat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
-public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+public double distance(Vector3D methodOpeningBraceToken){
+ final Vector3D d=methodOpeningBraceToken.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-isMethodEmpty.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
- final Vector3D d=p.subtract(zero);
+ Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+d=p.subtract(zero);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/829/pattern-ver1-serial/java.canvas_data_tools.src.main.java.edu.harvard.data.canvas.phase_1.PostVerifyRequestsJob.java-setup.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+d.add(p);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/6056/pattern-ver1-serial/fr.inria.soctrace.tools.ocelotl.ui.src.fr.inria.soctrace.tools.ocelotl.ui.loaders.ConfDataLoader.java-getTypes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+n.add(p);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/6056/pattern-ver1-serial/fr.inria.soctrace.tools.ocelotl.ui.src.fr.inria.soctrace.tools.ocelotl.ui.loaders.ConfDataLoader.java-getTypes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+p.add(d);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5858/pattern-ver1-serial/Compile.app.src.main.java.compile_inc.compile.ContactDatabaseHandler.java-dbGetAllContacts.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+p.add(n);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5858/pattern-ver1-serial/Compile.app.src.main.java.compile_inc.compile.ContactDatabaseHandler.java-dbGetAllContacts.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+int a=0;
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+String OUTSTRING="";
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(equals(p)){
+return 0d;
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(equals(d)){
+return 0d;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(equals(n)){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+int a=1;
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+boolean b=true;
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d==null){
+return 0d;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(p==null){
+return 0d;
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if("index".equals(d)){
+return 0;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if("index".equals(p)){
+return 0;
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if("index".equals(n)){
+return 0;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d.equals("-1")){
+return 0d;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n.equals("-1")){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+assert (d!=null);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+assert (p!=null);
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+assert (n!=null);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(p!=null){
+ final Vector3D d=p.subtract(zero);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+return n.getNorm();
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+assert (d!=p.subtract(zero));
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+assert (n!=new Vector3D(1.0,d,-d.dotProduct(direction),direction));
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+assert (p!=null);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d.equals("655")){
+System.out.println();
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n.equals("655")){
+System.out.println();
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
- final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+ final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction)*20,direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/4235/pattern-ver1-serial/NTheEndAgain.src.fr.ribesg.bukkit.ntheendagain.world.EndWorldHandler.java-init.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if((Thread.currentThread().interrupted())){
+return 0d;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return n==null?null:n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
-return n.getNorm();
+return n!=null?n.getNorm():null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null){
+return 0;
+}else {
 return n.getNorm();
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2390/pattern-ver1-serial/AlphaTeam.src.BufferContext.java-undo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+assert (d!=null):"Appointments day is not allowed to be null!";
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+assert (p!=null):"Appointments day is not allowed to be null!";
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+assert (n!=null):"Appointments day is not allowed to be null!";
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:18:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(p==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(zero==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(direction==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if("系统退出".equals(d)){
+n.add(p);
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if("系统退出".equals(n)){
+p.add(d);
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d==null){
+throw new IllegalStateException("User isn't registered! "+p);
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null){
+throw new IllegalStateException("User isn't registered! "+d);
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
+if(p==null){
+return 0;
+}
  final Vector3D d=p.subtract(zero);
+if(d==null){
+return 0;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/6299/pattern-ver1-serial/src.main.java.com.lothrazar.cyclicmagic.util.UtilNBT.java-countItemsFromNBT.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
+if(d==null){
+return 0;
+}
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null){
+return 0;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/6299/pattern-ver1-serial/src.main.java.com.lothrazar.cyclicmagic.util.UtilNBT.java-countItemsFromNBT.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null||d==null||p==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(d==null||n==null||p==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(d==null||p==null||n==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(p==null||d==null||n==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(n==null||p==null||d==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[159,167]
------------Candidate---------------
 public double distance(Vector3D p){
  final Vector3D d=p.subtract(zero);
  final Vector3D n=new Vector3D(1.0,d,-d.dotProduct(direction),direction);
+if(p==null||n==null||d==null){
+return 0d;
+}
 return n.getNorm();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:19:52 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.closestPoint:[195, 196, 197, 202, 203, 204, 206]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 17:21:33 CDT - 2019.09.04 AD at 17:39:50 CDT , PNumber : 11413, CandNumber : 132 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
- final double cos=direction.dotProduct(line.direction);
+ double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
- final double a=delta0.dotProduct(direction);
+ double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
- final double b=delta0.dotProduct(line.direction);
+ double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<=Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ final Vector3D delta0=line.zero.subtract(cos,zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n>Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(cos-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(n-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(b-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ final Vector3D delta0=line.zero.subtract(1,zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-b*cos)/2,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
- final double a=delta0.dotProduct(direction);
+ final double a=delta0.dotProduct(direction,delta0);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4714/pattern-ver1-serial/gisWebProject.src.emergencyProcess.FollowUser.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-b*cos)/cos,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-b*cos)/a,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ final Vector3D delta0=line.zero.add(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
- final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ double cos=direction.dotProduct(line.direction);
+ double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
- final double a=delta0.dotProduct(direction);
+ Vector3D delta0=line.zero.subtract(zero);
+ double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
- final double a=delta0.dotProduct(direction);
+ double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
- final double b=delta0.dotProduct(line.direction);
+ double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
- final double b=delta0.dotProduct(line.direction);
+ double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
- final double cos=direction.dotProduct(line.direction);
+ final double cos=this.direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+closestPoint(line);
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-b*cos)/(int)n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+synchronized(this){
 if(n<Precision.EPSILON){
 return zero;
+}
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ final double n=(1)+cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,((a)+b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+line=this;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1+1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
+synchronized(this){
 return zero;
+}
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ @SuppressWarnings("UnusedAssignment") double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
- final double a=delta0.dotProduct(direction);
- final double b=delta0.dotProduct(line.direction);
+ @SuppressWarnings("UnusedAssignment") double a=delta0.dotProduct(direction);
+ @SuppressWarnings("UnusedAssignment") double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
+line=line;
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(true){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ final double n=1-2;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-2)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
+int a=0;
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ final double n=1-cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-n)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-a)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
+String OUTSTRING="";
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+String OUTSTRING="";
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+int Precision=5;
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(Double.isNaN(n)){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
- final double n=1-cos*cos;
+ final double n=1-1.0*cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(1.0*a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-1.0*b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(equals(line)){
+return null;
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+if(equals(cos)){
+return null;
+}
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if(equals(cos)){
+return null;
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+if(equals(n)){
+return null;
+}
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
+int indexSelection=0;
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
- final Vector3D delta0=line.zero.subtract(zero);
+ final Vector3D delta0=line.zero.subtract(cos+1,zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
+int a=1;
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+String EPSILON="%#.&f";
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
+boolean b=true;
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:42:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(line==null){
+return null;
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(delta0==null){
+return null;
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(direction==null){
+return null;
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+if(delta0==null){
+return null;
+}
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
+}
+if(line.zero==null){
+return null;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(cos==direction.dotProduct(line.direction)){
+return delta0;
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
+}
+if(line==null){
+return null;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+if(line==null){
+return null;
+}
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if("&null".equals(cos)){
+return null;
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if("&null".equals(line)){
+return null;
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+if("&null".equals(n)){
+return null;
+}
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if("&null".equals(delta0)){
+return null;
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+if("&null".equals(a)){
+return null;
+}
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+if("&null".equals(b)){
+return null;
+}
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+if(cos<0){
+return null;
+}
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if(cos<0){
+return null;
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(delta0.equals("-1")){
+return null;
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||n==Long.MIN_VALUE){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+assert (line!=null);
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+assert (delta0!=null);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(line!=null){
+ final double cos=direction.dotProduct(line.direction);
+ final double n=1-cos*cos;
+if(n<Precision.EPSILON){
+return zero;
+}
+ final Vector3D delta0=line.zero.subtract(zero);
+ final double a=delta0.dotProduct(direction);
+ final double b=delta0.dotProduct(line.direction);
+return new Vector3D(1,zero,(a-b*cos)/n,direction);
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+assert (cos!=direction.dotProduct(line.direction));
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+assert (n!=1-cos*cos);
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+assert (delta0!=line.zero.subtract(zero));
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+assert (a!=delta0.dotProduct(direction));
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+assert (b!=delta0.dotProduct(line.direction));
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+assert (line!=null);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(delta0.equals(null)){
+return null;
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if((Thread.currentThread().interrupted())){
+return null;
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||"查看红包".equals(n)){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||n==3){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,a-b*cos*100/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<0||n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||n==0){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,a-b*cos*5/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,1.0/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||n>9){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON&&n<4000000){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,a/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON&&n!=9999){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(Precision.EPSILON>0&&n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+assert (cos>=0):"Receive a negative tratment";
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+assert (n>=0):"Receive a negative tratment";
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+assert (a>=0):"Receive a negative tratment";
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+assert (b>=0):"Receive a negative tratment";
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+assert (line!=null):"Appointments day is not allowed to be null!";
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+assert (delta0!=null):"Appointments day is not allowed to be null!";
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+assert (cos!=0):"Receive a size tratment";
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+assert (n!=0):"Receive a size tratment";
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+assert (a!=0):"Receive a size tratment";
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+assert (b!=0):"Receive a size tratment";
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+if(n<Precision.EPSILON||n=='"'){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(direction==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(delta0==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
+if(delta0==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
+}
+if(line.zero==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
+if(cos>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if(cos>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+if(line.direction==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(direction==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
+}
+if(zero==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
-if(n<Precision.EPSILON){
+boolean haveBreadCrumbs=false;
+if(n<Precision.EPSILON&&haveBreadCrumbs){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,((a-b*cos))+n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return new Vector3D(1,zero,(a-b*cos)/n+1,direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
+if(delta0==null){
+throw new IllegalStateException("User isn't registered! "+line);
+}
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
+if(cos==3){
+System.out.println("debug");
+}
+if(cos==3){
+System.out.println("debug");
+}
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
+if(n==3){
+System.out.println("debug");
+}
+if(n==3){
+System.out.println("debug");
+}
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return delta0;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
-return new Vector3D(1,zero,(a-b*cos)/n,direction);
+return (Vector3D)(new Vector3D(1,zero,(a-b*cos)/n,direction));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[189,208]
------------Candidate---------------
 public Vector3D closestPoint(Line line){
+long startTime=System.currentTimeMillis();
  final double cos=direction.dotProduct(line.direction);
  final double n=1-cos*cos;
 if(n<Precision.EPSILON){
 return zero;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
  final Vector3D delta0=line.zero.subtract(zero);
  final double a=delta0.dotProduct(direction);
  final double b=delta0.dotProduct(line.direction);
 return new Vector3D(1,zero,(a-b*cos)/n,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:46:59 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.intersection:[216, 217]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 17:48:42 CDT - 2019.09.04 AD at 17:53:41 CDT , PNumber : 11296, CandNumber : 37 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
- final Vector3D closest=closestPoint(line);
+ Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
- final Vector3D closest=closestPoint(line);
+ final Vector3D closest=line.closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
-return line.contains(closest)?closest:null;
+return line.equals(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3866/pattern-ver1-serial/Common.src.common.Mathematics.PostfixConverter.java-convertToPostfix.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+int a=0;
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+String OUTSTRING="";
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+if(equals(line)){
+return null;
+}
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(equals(closest)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(equals(line)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+int a=1;
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+boolean b=true;
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+if(line==null){
+return null;
+}
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest==null){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(line==null){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if("&null".equals(line)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if("&null".equals(closest)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest.equals("-1")){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+assert (line!=null);
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+assert (closest!=null);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(line.contains(closest)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(line.equals(InputStream.class)){
+return closest;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+if(line!=null){
+ final Vector3D closest=closestPoint(line);
+return line.contains(closest)?closest:null;
+}
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+assert (closest!=closestPoint(line));
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+assert (line!=null);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest.equals(null)){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest.equals("655")){
+System.out.println();
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
-return line.contains(closest)?closest:null;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
-return line.contains(closest)?closest:null;
+return closest;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 17:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
-return line.contains(closest)?closest:null;
+return !line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/4293/pattern-ver1-serial/aparcaba-simulator.src.main.java.ar.org.aparcaba.simulator.SensorManager.java-isFree.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
-return line.contains(closest)?closest:null;
+return (Vector3D)(line.contains(closest)?closest:null);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+assert (closest!=null):"Appointments day is not allowed to be null!";
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
+assert (line!=null):"Appointments day is not allowed to be null!";
  final Vector3D closest=closestPoint(line);
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(line==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest==null){
+throw new IllegalStateException("User isn't registered! "+line);
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(line==null||closest==null){
+throw new NullPointerException();
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[210,218]
------------Candidate---------------
 public Vector3D intersection(Line line){
  final Vector3D closest=closestPoint(line);
+if(closest==null||line==null){
+throw new NullPointerException();
+}
 return line.contains(closest)?closest:null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:00:43 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.SubLine.buildIntervalSet:[137, 138]#0.35355339059327373
Compute Candidate : 2019.09.04 AD at 18:02:23 CDT - 2019.09.04 AD at 18:09:12 CDT , PNumber : 11281, CandNumber : 56 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
- final Line line=new Line(start,end);
+ Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(start.getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(end.getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),start.getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),end.getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+end.add(start);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4847/pattern-ver1-serial/capsule-generation.src.main.java.org.paninij.runtime.check.Panini.java-findUnsafe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+start.add(end);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4847/pattern-ver1-serial/capsule-generation.src.main.java.org.paninij.runtime.check.Panini.java-findUnsafe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+int a=0;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+String OUTSTRING="";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+int a=1;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+boolean b=true;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+if(start==null){
+return null;
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+if(end==null){
+return null;
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.toSubSpace(start)==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.toSubSpace(end)==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if("&null".equals(line)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if("&null".equals(start)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if("&null".equals(end)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.equals("-1")){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX()-22,line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()-22);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+assert (line!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+assert (start!=null);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+assert (end!=null);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.contains(start)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.contains(end)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+if(start!=null){
+ final Line line=new Line(start,end);
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+if(end!=null){
+ final Line line=new Line(start,end);
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+assert (line!=new Line(start,end));
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX()+1,line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()+1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+assert (start!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+assert (end!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line.equals("655")){
+System.out.println();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+assert (line!=null):"Appointments day is not allowed to be null!";
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+assert (start!=null):"Appointments day is not allowed to be null!";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
+assert (end!=null):"Appointments day is not allowed to be null!";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if("系统退出".equals(line)){
+end.add(start);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if("系统退出".equals(line)){
+start.add(end);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return (IntervalsSet)new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX())!=null?new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()):new IntervalsSet();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX())==null?new IntervalsSet():new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return (IntervalsSet)(new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(start==null||line==null||end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(end==null||line==null||start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line==null||start==null||end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(line==null||end==null||start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(start==null||end==null||line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
+if(end==null||start==null||line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+IntervalsSet taskList=new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return taskList;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3828/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.AbstractBlockServiceApiImpl.java-changeVolumeVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 9, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[129,140]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector3D start,Vector3D end) throws MathIllegalArgumentException{
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+IntervalsSet r=(IntervalsSet)new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return r;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 9, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:12:15 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.getAbscissa:[114]#0.35355339059327373
Compute Candidate : 2019.09.04 AD at 18:13:59 CDT - 2019.09.04 AD at 18:17:59 CDT , PNumber : 11280, CandNumber : 39 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.subtract(zero).dotProduct(point,direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.subtract(zero).dotProduct(direction,point);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6885/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.gateway.src.main.java.org.wso2.carbon.apimgt.gateway.handlers.logging.APILogMessageHandler.java-mediate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.subtract(1,zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.add(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D valueAnimator){
+return valueAnimator.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3559/pattern-ver1-serial/library.src.main.java.qiu.niorgai.StatusBarCompatLollipop.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D edge){
+return edge.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1943/pattern-ver1-serial/violet-framework.src.main.java.com.horstmann.violet.product.diagram.abstracts.node.AbstractNode.java-addConnection.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D methodOpeningBrace){
+return methodOpeningBrace.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-hasTryFinallyBlock.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D mpR){
+return mpR.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/2030/pattern-ver1-serial/app.src.main.java.com.example.andreas.mainview.slashy.SlashyActivity.java-onCompletion.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D methodAST){
+return methodAST.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck.java-isMainMethodParameters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D managerFactory){
+return managerFactory.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1774/pattern-ver1-serial/src.main.java.com.spontaneous.server.SpontaneousApplication.java-sessionFactory.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
-public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+public double getAbscissa(Vector3D methodOpeningBraceToken){
+return methodOpeningBraceToken.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-isMethodEmpty.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+int a=0;
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+String OUTSTRING="";
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(equals(point)){
+return 0d;
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+int a=1;
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+boolean b=true;
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Solution---------------
 public double getAbscissa(Vector3D point){
+if(point==null){
+return 0d;
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point.subtract(zero)==null){
+return 0d;
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if("index".equals(point)){
+return 0;
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+assert (point!=null);
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point!=null){
+return point.subtract(zero).dotProduct(direction);
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return (double)point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return -point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point!=null?point.subtract(zero).dotProduct(direction):null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/3495/pattern-ver1-serial/server.bennu-core.src.main.java.org.fenixedu.bennu.core.domain.groups.PersistentUserGroup.java-select.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.subtract(zero)==null?null:point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return direction==null?null:point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return (double)(point.subtract(zero).dotProduct(direction));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
-return point.subtract(zero).dotProduct(direction);
+return point.subtract(zero)!=null?point.subtract(zero).dotProduct(direction):null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point.subtract(zero)==null){
+return 0;
+}else {
 return point.subtract(zero).dotProduct(direction);
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2390/pattern-ver1-serial/AlphaTeam.src.BufferContext.java-undo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+assert (point!=null):"Appointments day is not allowed to be null!";
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point.subtract(zero)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(zero==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(direction==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return point.subtract(zero).dotProduct(direction);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point.subtract(zero)!=null&&direction!=null){
 return point.subtract(zero).dotProduct(direction);
+}else {
+return 0;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1034/pattern-ver1-serial/gemfire-core.src.main.java.com.gemstone.gemfire.distributed.internal.membership.InternalDistributedMember.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[106,115]
------------Candidate---------------
 public double getAbscissa(Vector3D point){
+if(point.subtract(zero)!=null){
 return point.subtract(zero).dotProduct(direction);
+}
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4285/pattern-ver1-serial/Apps.Retrofit.app.src.main.java.inso.activity.adapter.PowerPlantAdapter.java-getItemCount.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 5, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:25:41 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.Line.toSubSpace:[129]#0.35355339059327373
Compute Candidate : 2019.09.04 AD at 18:27:21 CDT - 2019.09.04 AD at 18:31:12 CDT , PNumber : 11281, CandNumber : 15 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return new Vector1D(getAbscissa((Vector3D)point)-1);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+int a=0;
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+String OUTSTRING="";
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return new Vector1D(getAbscissa((Vector3D)point)*1000);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+if(equals(point)){
+return null;
+}
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+int a=1;
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+boolean b=true;
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+if(point==null){
+return null;
+}
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return (Vector1D)new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return new Vector1D(getAbscissa((Vector3D)point)*-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+assert (point!=null);
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+if(point!=null){
+return new Vector1D(getAbscissa((Vector3D)point));
+}
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
-return new Vector1D(getAbscissa((Vector3D)point));
+return (Vector1D)(new Vector1D(getAbscissa((Vector3D)point)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java[125,130]
------------Candidate---------------
 public Vector1D toSubSpace(Vector<Euclidean3D> point){
+assert (point!=null):"Appointments day is not allowed to be null!";
 return new Vector1D(getAbscissa((Vector3D)point));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:31:56 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.threed.SubLine.SubLine:[44, 45, 46, 47]#0.2773500981126146
Compute Candidate : 2019.09.04 AD at 18:33:34 CDT - 2019.09.04 AD at 18:37:31 CDT , PNumber : 11280, CandNumber : 53 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+this.line=null;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=null;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+synchronized(this){
 this.line=line;
+}
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+synchronized(this){
 this.remainingRegion=remainingRegion;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line bindingModes,IntervalsSet remainingRegion){
+this.line=bindingModes;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet bindingModes){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line collectorManager,IntervalsSet remainingRegion){
+this.line=collectorManager;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet collectorManager){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line parentFileShare,IntervalsSet remainingRegion){
+this.line=parentFileShare;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet parentFileShare){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line pIssued,IntervalsSet remainingRegion){
+this.line=pIssued;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet pIssued){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=pIssued;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4702/pattern-ver1-serial/snp.core.src.main.java.com.github.jlgrock.snp.core.domain.Observation.java-setIssued.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line Pin,IntervalsSet remainingRegion){
+this.line=Pin;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet Pin){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line graphdbInput,IntervalsSet remainingRegion){
+this.line=graphdbInput;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet graphdbInput){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line thePrescribeMedicationCntl,IntervalsSet remainingRegion){
+this.line=thePrescribeMedicationCntl;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet thePrescribeMedicationCntl){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=thePrescribeMedicationCntl;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/1366/pattern-ver1-serial/src.healthhub.PrescribeMedicationUI_2.java-PrescribeMedicationUI_2.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line pScore,IntervalsSet remainingRegion){
+this.line=pScore;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet pScore){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line pterm,IntervalsSet remainingRegion){
+this.line=pterm;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet pterm){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line boid,IntervalsSet remainingRegion){
+this.line=boid;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet boid){
 this.line=line;
-this.remainingRegion=remainingRegion;
+this.remainingRegion=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+line=line;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+int a=0;
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+String OUTSTRING="";
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+int a=1;
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+boolean b=true;
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+assert (line!=null);
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+assert (remainingRegion!=null);
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+assert (!remainingRegion.isEmpty());
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+public SubLine(Line r,IntervalsSet remainingRegion){
+line=r;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
-public SubLine(Line line,IntervalsSet remainingRegion){
+public SubLine(Line line,IntervalsSet r){
 this.line=line;
-this.remainingRegion=remainingRegion;
+remainingRegion=r;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/3960/pattern-ver1-serial/Ports.iOSPort.src.com.codename1.impl.ios.IOSImplementation.java-setBounds.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+assert (line!=null);
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+assert (remainingRegion!=null);
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+if(remainingRegion.isEmpty()){
+remainingRegion=null;
+}
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
-this.line=line;
+try{
 this.remainingRegion=remainingRegion;
+}finally{
+this.line=line;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+try{
 this.line=line;
+}finally{
 this.remainingRegion=remainingRegion;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
 this.remainingRegion=remainingRegion;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+assert (line!=null):"Appointments day is not allowed to be null!";
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+assert (remainingRegion!=null):"Appointments day is not allowed to be null!";
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+if(remainingRegion.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+if(line==null||remainingRegion==null){
+throw new NullPointerException();
+}
 this.line=line;
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
 this.line=line;
+if(remainingRegion==null||line==null){
+throw new NullPointerException();
+}
 this.remainingRegion=remainingRegion;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java[40,47]
------------Candidate---------------
 public SubLine(Line line,IntervalsSet remainingRegion){
+long startTime=System.currentTimeMillis();
 this.line=line;
 this.remainingRegion=remainingRegion;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 18:42:11 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_2 | 2019.09.04 AD at 18:42:11 CDT
Already fixed : org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting_purify_2
Current failed test : org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1 | 2019.09.04 AD at 18:42:11 CDT
Location : org.apache.commons.math3.geometry.euclidean.twod.SubLine.intersection:[113, 114, 117, 120]#0.3779644730092272
Compute Candidate : 2019.09.04 AD at 18:44:22 CDT - 2019.09.04 AD at 19:16:11 CDT , PNumber : 11436, CandNumber : 168 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+Vector2D v2D=line2.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Location loc1=getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+Location loc2=subLine.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1651/pattern-ver1-serial/src.main.java.au.com.rayh.XCodeBuilder.java-perform.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+Location loc2=getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3451/pattern-ver1-serial/src.main.java.com.ohnosequences.typedGraphs.TypedVertex.java-outMany.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
-if(includeEndPoints){
+if(false){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4923/pattern-ver1-serial/src.ClueBoard.ComputerPlayer.java-takeTurn.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ final Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ final Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ final Line line1=(Line)getHyperplane();
+ final Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ final Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ final Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ final Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+ final Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ final Line line2=(Line)subLine.getHyperplane();
+ final Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ final Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ final Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ final Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+ final Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
+ Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+ Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ Line line1=(Line)getHyperplane();
+ Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ Line line2=(Line)subLine.getHyperplane();
+ Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+ Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Location loc1=this.getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Vector2D v2D=line2.intersection(line2);
+Location loc1=getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/208/pattern-ver1-serial/src.main.java.eu.musesproject.server.dataminer.DataMiner.java-dataClassification.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
-public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+public Vector2D intersection(SubLine subLine,boolean broadcast){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
-if(includeEndPoints){
+if(broadcast){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+synchronized(this){
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+subLine=this;
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
-Vector2D v2D=line1.intersection(line2);
+ @SuppressWarnings("UnusedAssignment") Line line1=(Line)getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Line line2=(Line)subLine.getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Line line1=(Line)getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+ @SuppressWarnings("UnusedAssignment") Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
-Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Line line1=(Line)getHyperplane();
+ @SuppressWarnings("UnusedAssignment") Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ @SuppressWarnings("UnusedAssignment") Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+line1=line1;
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+subLine=subLine;
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
-if(includeEndPoints){
+if(includeEndPoints&&includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+int a=0;
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
-public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+public Vector2D intersection(SubLine subLine,boolean readOnly){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
-if(includeEndPoints){
+if(!readOnly){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+String OUTSTRING="";
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine.isEmpty()){
+return null;
+}
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(equals(subLine)){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(equals(line2)){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+if(equals(loc1)){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+if(equals(loc1)){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(equals(loc1)){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(equals(v2D)){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+int indexSelection=0;
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
-return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
+return (includeEndPoints&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1150/pattern-ver1-serial/src.main.java.de.nedelosk.modularmachines.client.gui.GuiAssembler.java-onUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+int a=1;
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
-public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+public Vector2D intersection(SubLine parentPuzzleBoard,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
-Line line2=(Line)subLine.getHyperplane();
+Line line2=(Line)parentPuzzleBoard.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
-Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+Location loc2=parentPuzzleBoard.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3965/pattern-ver1-serial/src.model.algorithm.AStar.java-generateDescendants.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+boolean b=true;
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(line1==null){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine==null){
+return null;
+}
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line2==null){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+if(v2D==null){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+if(v2D==null){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Solution---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D==null){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+if(loc1==null){
+return null;
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+if(loc1==null){
+return null;
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(loc1==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(subLine==null){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1==null){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==null){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(subLine==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line2==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==(Line)getHyperplane()){
+return v2D;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line2==(Line)subLine.getHyperplane()){
+return v2D;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(v2D==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc1==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if("&null".equals(line1)){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if("&null".equals(subLine)){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if("&null".equals(includeEndPoints)){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if("&null".equals(line2)){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if("&null".equals(v2D)){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if("&null".equals(loc1)){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(v2D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(line1.equals("-1")){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D.equals("-1")){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line2.equals("-1")){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(loc1.equals("-1")){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2.equals("-1")){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+if(isEmpty()){
+throw new IllegalStateException("Pop an empty stack.");
+}
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1296/pattern-ver1-serial/src.main.java.by.amushinsky.algorithms.basic.LinkedListStack.java-pop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+assert (line1!=null);
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+assert (subLine!=null);
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+assert (line2!=null);
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+assert (v2D!=null);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+assert (v2D!=null);
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+assert (v2D!=null);
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+assert (loc1!=null);
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+assert (loc1!=null);
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+assert (loc1!=null);
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+assert (!subLine.isEmpty());
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1.contains(v2D)){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line2.contains(v2D)){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+if(subLine!=null){
+Line line1=(Line)getHyperplane();
+Line line2=(Line)subLine.getHyperplane();
+Vector2D v2D=line1.intersection(line2);
+Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(includeEndPoints){
+return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
+}else {
+return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
+}
+}
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+assert (line1!=(Line)getHyperplane());
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+assert (line2!=(Line)subLine.getHyperplane());
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+assert (v2D!=line1.intersection(line2));
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+assert (loc1!=getRemainingRegion().checkPoint(line1.toSubSpace(v2D)));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+assert (loc2!=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D)));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+assert (subLine!=null);
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1.equals("655")){
+System.out.println();
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1.equals("655")){
+System.out.println();
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D.equals("655")){
+System.out.println();
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(v2D.equals("655")){
+System.out.println();
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line2.equals("655")){
+System.out.println();
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if((Thread.currentThread().interrupted())){
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(subLine.isEmpty()){
+subLine=null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Location loc1=getRemainingRegion().checkPoint(line1==null?null:line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
-Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+Location loc1=getRemainingRegion().checkPoint(line1!=null?line1.toSubSpace(v2D):null);
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(subLine.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(subLine.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+assert (line1!=null):"Appointments day is not allowed to be null!";
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+assert (subLine!=null):"Appointments day is not allowed to be null!";
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+assert (line2!=null):"Appointments day is not allowed to be null!";
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+assert (v2D!=null):"Appointments day is not allowed to be null!";
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+assert (v2D!=null):"Appointments day is not allowed to be null!";
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+assert (v2D!=null):"Appointments day is not allowed to be null!";
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+assert (loc1!=null):"Appointments day is not allowed to be null!";
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(subLine.isEmpty()){
+subLine=null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(subLine.isEmpty()){
+subLine=null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(subLine.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(subLine.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
+if(subLine==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(subLine==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line2==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line2==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(v2D==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D==null){
+throw new IllegalStateException("User isn't registered! "+line1);
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(loc1==null){
+throw new IllegalStateException("User isn't registered! "+line1);
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line2==null){
+throw new IllegalStateException("User isn't registered! "+subLine);
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D==null){
+throw new IllegalStateException("User isn't registered! "+line2);
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2==null){
+throw new IllegalStateException("User isn't registered! "+line2);
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2==null){
+throw new IllegalStateException("User isn't registered! "+subLine);
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:29:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2==null){
+throw new IllegalStateException("User isn't registered! "+v2D);
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(loc1==null){
+throw new IllegalStateException("User isn't registered! "+v2D);
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line2==null||line1==null){
+return v2D;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Solution---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(v2D==null||line1==null){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line2==null||line1==null){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(v2D==null||line2==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(v2D==null||loc1==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc1==null||v2D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(v2D==null||loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(loc2==null||v2D==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6302/pattern-ver1-serial/modules.core.src.main.java.io.smsc.repository.customer.customer.CustomerRepositoryImpl.java-removeUser.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
-return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
+return v2D;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
-return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
+return v2D;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1==null||line2==null){
+throw new NullPointerException();
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==null||v2D==null){
+throw new NullPointerException();
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line2==null||v2D==null){
+throw new NullPointerException();
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(v2D==null||loc1==null){
+throw new NullPointerException();
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+if(loc1==null||loc2==null){
+throw new NullPointerException();
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
+if(loc2==null||loc1==null){
+throw new NullPointerException();
+}
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+if(loc1==null||loc2==null){
+throw new NullPointerException();
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
+if(loc2==null||loc1==null){
+throw new NullPointerException();
+}
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1==null||line2==null||subLine==null){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
+if(line1==null||subLine==null||line2==null){
+return null;
+}
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Solution---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==null||v2D==null||subLine==null){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Solution---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+if(line1==null||subLine==null||v2D==null){
+return null;
+}
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
+if(line1==null||subLine==null||loc1==null){
+return null;
+}
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
+if(line1==null||subLine==null||loc2==null){
+return null;
+}
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[96,131]
------------Candidate---------------
 public Vector2D intersection(SubLine subLine,boolean includeEndPoints){
+long startTime=System.currentTimeMillis();
 Line line1=(Line)getHyperplane();
 Line line2=(Line)subLine.getHyperplane();
 Vector2D v2D=line1.intersection(line2);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 Location loc1=getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
 Location loc2=subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
 if(includeEndPoints){
 return ((loc1!=Location.OUTSIDE)&&(loc2!=Location.OUTSIDE))?v2D:null;
 }else {
 return ((loc1==Location.INSIDE)&&(loc2==Location.INSIDE))?v2D:null;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:35:18 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.twod.SubLine.SubLine:[56, 57]#0.35355339059327373
Compute Candidate : 2019.09.04 AD at 19:36:56 CDT - 2019.09.04 AD at 19:41:10 CDT , PNumber : 11280, CandNumber : 16 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+start=start;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+end=start;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+start=end;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+end=end;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+end.add(start);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3832/pattern-ver1-serial/src.miningChanges.ObtainVSMScore.java-updateCorpusNL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+start.add(end);
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3832/pattern-ver1-serial/src.miningChanges.ObtainVSMScore.java-updateCorpusNL.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+assert (start!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+assert (end!=null);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[51,57]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public SubLine(Vector2D start,Vector2D end){
 super(new Line(start,end),buildIntervalSet(start,end));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:44:01 CDT
--------------- END -----------------
Location : org.apache.commons.math3.geometry.euclidean.twod.SubLine.buildIntervalSet:[139, 140]#0.3333333333333333
Compute Candidate : 2019.09.04 AD at 19:45:42 CDT - 2019.09.04 AD at 19:52:57 CDT , PNumber : 11281, CandNumber : 69 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
- final Line line=new Line(start,end);
+ Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(start.getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(end.getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),start.getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),end.getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1694/pattern-ver1-serial/flinklink.src.main.java.eu.amidst.flinklink.core.learning.parametric.ParallelMaximumLikelihood2.java-updateModel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+end.add(start);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4847/pattern-ver1-serial/capsule-generation.src.main.java.org.paninij.runtime.check.Panini.java-findUnsafe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+start.add(end);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4847/pattern-ver1-serial/capsule-generation.src.main.java.org.paninij.runtime.check.Panini.java-findUnsafe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+int a=0;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+String OUTSTRING="";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+int a=1;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+boolean b=true;
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(start==null){
+return null;
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(end==null){
+return null;
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.toSubSpace(start)==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.toSubSpace(end)==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if("&null".equals(line)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:53:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if("&null".equals(start)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if("&null".equals(end)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.equals("-1")){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX()-22,line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()-22);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+assert (line!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+assert (start!=null);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+assert (end!=null);
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.contains(start)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.contains(end)){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(start!=null){
+ final Line line=new Line(start,end);
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(end!=null){
+ final Line line=new Line(start,end);
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+assert (line!=new Line(start,end));
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX()+1,line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()+1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+assert (start!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+assert (end!=null);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.equals("655")){
+System.out.println();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:54:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if((Thread.currentThread().interrupted())){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+assert (line!=null):"Appointments day is not allowed to be null!";
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+assert (start!=null):"Appointments day is not allowed to be null!";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+assert (end!=null):"Appointments day is not allowed to be null!";
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.toSubSpace(start)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line.toSubSpace(end)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(start==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(end==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if("系统退出".equals(line)){
+start.add(end);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if("系统退出".equals(line)){
+end.add(start);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4708/pattern-ver1-serial/com.topsun.posclient.application.src.com.topsun.posclient.application.ApplicationActionBarAdvisor.java-fillCoolBar.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null){
+throw new IllegalStateException("User isn't registered! "+start);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null){
+throw new IllegalStateException("User isn't registered! "+end);
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return (IntervalsSet)new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX())!=null?new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()):new IntervalsSet();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX())==null?new IntervalsSet():new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(start==null||line==null){
+throw new NullPointerException();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(end==null||line==null){
+throw new NullPointerException();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null||start==null){
+throw new NullPointerException();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null||end==null){
+throw new NullPointerException();
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(end==null||start==null){
+throw new NullPointerException();
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
+if(start==null||end==null){
+throw new NullPointerException();
+}
  final Line line=new Line(start,end);
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return (IntervalsSet)(new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX()));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null||start==null||end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(line==null||end==null||start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(end==null||line==null||start==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(start==null||line==null||end==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(end==null||start==null||line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
+if(start==null||end==null||line==null){
+return null;
+}
 return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+IntervalsSet taskList=new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return taskList;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/3828/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.AbstractBlockServiceApiImpl.java-changeVolumeVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 9, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java[133,142]
------------Candidate---------------
 private static IntervalsSet buildIntervalSet(Vector2D start,Vector2D end){
  final Line line=new Line(start,end);
-return new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+IntervalsSet r=(IntervalsSet)new IntervalsSet(line.toSubSpace(start).getX(),line.toSubSpace(end).getX());
+return r;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/968/pattern-ver1-serial/src.main.java.uk.ac.manchester.cs.jfact.datatypes.DatatypeNumericEnumeration.java-getMax.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 9, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 19:56:46 CDT
--------------- END -----------------
Location : org.apache.commons.math3.util.FastMath.atan2:[2664, 2665, 2660, 2582, 2586, 2612, 2624, 2636, 2646, 2659]#0.21320071635561041
Compute Candidate : 2019.09.04 AD at 19:58:29 CDT - 2019.09.04 AD at 21:05:38 CDT , PNumber : 6005, CandNumber : 370 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0&&1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>1||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>1){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==0){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==0){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==0){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==0){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>=0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
+return 0d;
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
+return 0d;
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
+return 0d;
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(x<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<0||y<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<0||x<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x>=0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
-if(y>0.0||1/y>0.0){
+if(y>=0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||1/y<=0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
+ra=temp;
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+rb=-(temp-ra-rb);
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
+rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<=0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
-if(y<0||invy<0){
+if(y<=0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
-return atan(r,0,x<0);
+return atan(r,0,x<=0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
- final double result=atan(ra,rb,x<0);
+ final double result=atan(ra,rb,x<=0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x&&y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||(1)/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||(1)/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y>0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||1/y>0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x==x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x||y==y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=y-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=r-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=ra-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=rb-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=xa-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y<=0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x<=0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y<=Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y<=Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x<=Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x<=Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
- final double temp=ra+rb;
+ final double temp=ra+y;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
- final double temp=ra+rb;
+ final double temp=ra+x;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y<0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x<0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y<0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
-if(y>0.0||1/y>0.0){
+if(y<0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y>=0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x>=0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y>=Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y>=Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x>=Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x>=Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y!=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y!=0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y!=0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x!=0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y!=Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y!=Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x!=Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x!=Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
+}
+if(x==Double.POSITIVE_INFINITY){
+return Math.PI*F_1_4;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
+}
+if(x==Double.NEGATIVE_INFINITY){
+return Math.PI*F_3_4;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
+}
+if(x==Double.POSITIVE_INFINITY){
+return -Math.PI*F_1_4;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
+}
+if(x==Double.NEGATIVE_INFINITY){
+return -Math.PI*F_3_4;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
+return 0;
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
+return 0;
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
+return 0;
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
-ra=temp;
+ra=y;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
-ra=temp;
+ra=x;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
-double rb=r-ra;
+double rb=y-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/3851/pattern-ver1-serial/src.main.java.com.sandagerdi.Operation.java-substraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
-double rb=r-ra;
+double rb=x-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/3851/pattern-ver1-serial/src.main.java.com.sandagerdi.Operation.java-substraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x<x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x||y<y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
-return result;
+return y;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
-return 0.0;
+return y;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
-return result;
+return y;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
-return Double.NaN;
+return y;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
-return Math.PI;
+return y;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
-return Math.PI;
+return y;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y>0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x>0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y>Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y>Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x>Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x>Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
-double rb=r-ra;
+double rb=r-y;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
-double rb=r-ra;
+double rb=r-x;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
- final double xb=x-xa;
+ final double xb=x-y;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x>x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x||y>y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||1.0/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1.0/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>3||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>3){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==-1){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==-1){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==-1){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==-1){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==-1){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import java.util.Iterator;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==-1){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x>=0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>=0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>0||1/y>=0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x>=0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>=0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>=0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+y++;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+x++;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
+x++;
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
+y++;
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
+x++;
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+y++;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+x++;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+y--;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+x--;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
+x--;
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
+x--;
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
+y--;
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
+y--;
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<=0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
-return atan(r,0,x<0);
+return atan(r,0,x<=0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
-if(y<0||invy<0){
+if(y<=0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
-if(y<0||invy<0){
+if(y<0||invy<=0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<0||invx<=0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<=0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
- final double result=atan(ra,rb,x<0);
+ final double result=atan(ra,rb,x<=0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
+y++;
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+y++;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3040/pattern-ver1-serial/src.main.java.edu.clemson.cs.r2jt.proving2.proofsteps.StrengthenConsequentStep.java-StrengthenConsequentStep.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
-return -0.0;
+return y;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<0&&invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
-if(y<0||invy<0){
+if(y<0&&invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0&&1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>0&&1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0&&1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
-if(x<0||invx<0){
+if(x<0&&invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0&&1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y!=0){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y!=0){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x!=0){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x!=0){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
-if(x==Double.POSITIVE_INFINITY){
+if(x!=0){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x!=0){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
-if(x==Double.POSITIVE_INFINITY){
+if(x!=0){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x!=0){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
-if(y>0.0||1/y>0.0){
+if(y>=0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x>=0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
-if(x>0){
+if(x>=0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
-if(y>0.0||1/y>0.0){
+if(y>=0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if(y>=0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
-if(y>0.0||1/y>0.0){
+if(y>=0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(-(temp-ra-rb)!=0){
 rb=-(temp-ra-rb);
+}
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+y=y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y+y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y+x==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x+y==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x+x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
-ra=copySign(0.0,y);
+ra=y;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(true){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(true){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(true){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(true){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(true){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(true){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
-ra=copySign(0.0,y);
+ra=x;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0/2||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>0/2){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
+int a=0;
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
+int a=0;
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
+int a=0;
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+int a=0;
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
+int a=0;
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+int a=0;
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
+int a=0;
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
+int a=0;
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
+int a=0;
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+int a=0;
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
+String OUTSTRING="";
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+String OUTSTRING="";
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
+String OUTSTRING="";
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
+String OUTSTRING="";
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
+String OUTSTRING="";
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
+String OUTSTRING="";
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+String OUTSTRING="";
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
+String OUTSTRING="";
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
+String OUTSTRING="";
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+String OUTSTRING="";
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
-return copySign(Math.PI,y);
+return y;
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return -1;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
+if(r==y/x){
+return ra;
+}
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
+if(rb==r-ra){
+return ra;
+}
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
+if(xb==x-xa){
+return ra;
+}
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(temp==ra+rb){
+return ra;
+}
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return 1;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if("index".equals(y)){
+return 0;
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if("index".equals(x)){
+return 0;
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
+if("index".equals(x)){
+return 0;
+}
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
+if("index".equals(x)){
+return 0;
+}
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
+if("index".equals(y)){
+return 0;
+}
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+if("index".equals(y)){
+return 0;
+}
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
+if("index".equals(y)){
+return 0;
+}
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if("index".equals(y)){
+return 0;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if("index".equals(x)){
+return 0;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+if("index".equals(result)){
+return 0;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return 1+-Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return Integer.MIN_VALUE;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
+}
+if(y<0){
+return 0d;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
+}
 }
+if(y<0){
+return 0d;
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(y<0){
+return 0d;
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
+if(y<0){
+return 0d;
+}
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
+if(y<0){
+return 0d;
+}
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return -Math.PI*F_1_2+0.0;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==0||y==Long.MIN_VALUE){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==0||x==Long.MIN_VALUE){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==Double.POSITIVE_INFINITY||y==Long.MIN_VALUE){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==Double.NEGATIVE_INFINITY||y==Long.MIN_VALUE){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==Long.MIN_VALUE){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY||x==Long.MIN_VALUE){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return Integer.MAX_VALUE;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return y;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
-return -Math.PI*F_1_2;
+return -Math.PI;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/6424/pattern-ver1-serial/mail.src.main.java.com.sun.mail.imap.ModifiedSinceTerm.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+try{
 rb=-(temp-ra-rb);
+}finally{
 ra=temp;
+}
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==0||"查看红包".equals(y)){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==Double.POSITIVE_INFINITY||"查看红包".equals(y)){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||"查看红包".equals(x)){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==0||"查看红包".equals(x)){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==Double.NEGATIVE_INFINITY||"查看红包".equals(y)){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY||"查看红包".equals(x)){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==0||y==3){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==0||x==3){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==Double.POSITIVE_INFINITY||y==3){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==Double.NEGATIVE_INFINITY||y==3){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==3){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY||x==3){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y<0||y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y<0||y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x<0||x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y<0||y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x<0||x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x<0||x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
-ra=copySign(0.0,y);
+ra=(copySign(0.0,y)+y)%y;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==0||y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==Double.POSITIVE_INFINITY||y==0){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==0||x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==0){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==Double.NEGATIVE_INFINITY||y==0){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY||x==0){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
-if(y==0){
+if(y==0||y>9){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
-if(x==0){
+if(x==0||x>9){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
-if(y==Double.POSITIVE_INFINITY){
+if(y==Double.POSITIVE_INFINITY||y>9){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x>9){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
-if(y==Double.NEGATIVE_INFINITY){
+if(y==Double.NEGATIVE_INFINITY||y>9){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
-if(x==Double.NEGATIVE_INFINITY){
+if(x==Double.NEGATIVE_INFINITY||x>9){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(y>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(y>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+if(y>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
+ra=copySign(0.0,y);
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+}
+if(ra<0){
+ra=0;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
+if(rb<0){
+rb=0;
+}
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
+if(ra<0){
+ra=0;
+}
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+if(rb<0){
+rb=0;
+}
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(ra!=temp){
 rb=-(temp-ra-rb);
-ra=temp;
+}
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(ra<=0){
+ra=1;
+}
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+}
+if(rb<=0){
+rb=1;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+}
+if(ra<=0){
+ra=1;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
-rb=-(temp-ra-rb);
+rb=-(temp-ra-rb)*y;
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
-rb=-(temp-ra-rb);
+rb=-(temp-ra-rb)*x;
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(ra>temp){
+ra=temp;
+}
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+}
+if(rb>ra){
+rb=ra;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+}
+if(ra>rb){
+ra=rb;
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(rb>temp){
+rb=temp;
+}
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+ final double invx=1.0/x;
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
- final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+ final double invy=1.0/y;
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
- final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
-return atan(r,0,x<0);
+return y;
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
-return atan(r,0,x<0);
+return x;
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
- final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
+ final double result=x*y;
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
- final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
+ final double invy=1.0/y;
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+try{
 rb=-(temp-ra-rb);
+}finally{
+ra=copySign(0.0,y);
+}
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
+try{
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
+}finally{
+ra=copySign(0.0,y);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
+try{
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
+}finally{
+ra=copySign(0.0,y);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x||y!=y||"查看红包".equals(x!=x)){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(x==Double.POSITIVE_INFINITY){
+return Math.PI*F_1_4;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
-if(x==Double.POSITIVE_INFINITY){
-return Math.PI*F_1_4;
-}
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(x==Double.NEGATIVE_INFINITY){
+return Math.PI*F_3_4;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
-}
-if(x==Double.NEGATIVE_INFINITY){
-return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x!=x||y!=y||y=='%'){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(x<0L||(x!=x||y!=y)){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(true){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
+if(y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5310/pattern-ver1-serial/src.main.java.snap.http.BearerAuthenticator.java-authenticate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(x==Double.POSITIVE_INFINITY){
+return -Math.PI*F_1_4;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
-if(x==Double.POSITIVE_INFINITY){
-return -Math.PI*F_1_4;
-}
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(x==Double.NEGATIVE_INFINITY){
+return -Math.PI*F_3_4;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
-}
-if(x==Double.NEGATIVE_INFINITY){
-return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+if(ra!=copySign(0.0,y)){
 rb=-(temp-ra-rb);
+}
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||1/y<0||"查看红包".equals(y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>0||"查看红包".equals(y>0)){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0||1/y<0||1/y=='%'){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y>0||1/y>0||1/y=='%'){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(y<0L||(y<0||1/y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(y<0L||(y>0||1/y>0)){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
+}
+if(x!=x||y!=y){
+return Double.NaN;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
+}
+if(x!=x||y!=y){
+return Double.NaN;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
+}
+if(x!=x||y!=y){
+return Double.NaN;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
+}
+if(x!=x||y!=y){
+return Double.NaN;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
+}
+if(x!=x||y!=y){
+return Double.NaN;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
-if(x!=x||y!=y){
-return Double.NaN;
-}
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+if(x!=x||y!=y){
+return Double.NaN;
+}
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if(true){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if(true){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
-rb=-(temp-ra-rb);
+try{
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
+}finally{
+rb=-(temp-ra-rb);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
-if(invx==0){
-if(x>0){
-return y;
-}else {
-return copySign(Math.PI,y);
-}
-}
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(x<0){
+return 0;
+}
+if(x>=y){
+return y-1;
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(y<0){
+return 0;
+}
+if(y>=x){
+return x-1;
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+if(result<0){
+return 0;
+}
+if(result>=y){
+return y-1;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+if(invx<0){
+return 0;
+}
+if(invx>=y){
+return y-1;
+}
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(invy<0){
+return 0;
+}
+if(invy>=y){
+return y-1;
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+if(result<0){
+return 0;
+}
+if(result>=x){
+return x-1;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
+if(invx<0){
+return 0;
+}
+if(invx>=x){
+return x-1;
+}
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(invy<0){
+return 0;
+}
+if(invy>=x){
+return x-1;
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(y<0){
+return 0;
+}
  final double result=x*y;
+if(y>=result){
+return result-1;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(x<0){
+return 0;
+}
  final double result=x*y;
+if(x>=result){
+return result-1;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
+if(y==3){
+System.out.println("debug");
+}
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
+if(y==3){
+System.out.println("debug");
+}
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+if(y==3){
+System.out.println("debug");
+}
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
+}
+if(y==3){
+System.out.println("debug");
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
+if(y==3){
+System.out.println("debug");
+}
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
+}
+if(y==3){
+System.out.println("debug");
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
+if(y==3){
+System.out.println("debug");
+}
 ra=copySign(0.0,y);
+if(y==3){
+System.out.println("debug");
+}
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+if(y==1/y){
+return 0.0;
+}else {
 if(y>0||1/y>0){
 return 0.0;
+}
+if(y<0||1/y<0){
+return -0.0;
+}
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
-ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
+if(y>0||1/y>0){
+return 0.0;
+}
+if(y==1/y){
+return -0.0;
+}else {
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
+}
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
+if(y>0.0||1/y>0.0){
+return Math.PI;
+}
+if(y==1/y){
+return -Math.PI;
+}else {
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
+}
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
+if(y==1/y){
+return Math.PI*F_1_2;
+}else {
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
+}
+if(y<0||1/y<0){
+return -Math.PI*F_1_2;
+}
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(y>0||1/y>0){
+return Math.PI*F_1_2;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
-return Math.PI*F_1_2;
-}
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
+if(y>0||1/y>0){
+return Math.PI*F_1_2;
+}
+if(y==1/y){
+return -Math.PI*F_1_2;
+}else {
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
+}
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/1425/pattern-ver1-serial/ScalableStorageService.src.consistent_hashing.Range.java-isWithin.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
+if(y<0||1/y<0){
+return -Math.PI*F_1_2;
+}
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
-}
-if(y<0||1/y<0){
-return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if((y>0)||(1/y>0)){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if((y>0)||(1/y>0)){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if((y>0)||(1/y>0)){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
-if(y>0||1/y>0){
+if((y>0)||(1/y>0)){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
-if(y<0||1/y<0){
+if((y<0)||(1/y<0)){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
-if(y>0||1/y>0){
+if((y>0)||(1/y>0)){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
-rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 8, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
+ra=Math.round(ra*100.0)/100.0;
 if(ra==0){
 ra=copySign(0.0,y);
 }
+ra=Math.round(ra*100.0)/100.0;
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
+rb=Math.round(rb*100.0)/100.0;
 ra=temp;
+ra=Math.round(ra*100.0)/100.0;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
+rb=Math.round(rb*100.0)/100.0;
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
+ra=Math.round(ra*100.0)/100.0;
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb=Math.round(rb*100.0)/100.0;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
+ra=Math.round(ra*100.0)/100.0;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb=Math.round(rb*100.0)/100.0;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
+ra=Math.round(ra*100.0)/100.0;
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb+=y;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb+=x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x*y;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x*x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
+if(y==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY){
+return Math.PI*F_1_4;
+}
+if(x==Double.NEGATIVE_INFINITY){
+return Math.PI*F_3_4;
+}
+return Math.PI*F_1_2;
+}
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
-}
-}
-if(y==Double.POSITIVE_INFINITY){
-if(x==Double.POSITIVE_INFINITY){
-return Math.PI*F_1_4;
-}
-if(x==Double.NEGATIVE_INFINITY){
-return Math.PI*F_3_4;
 }
-return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 0, INS : 1, DEL : 18
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
+try{
 rb=-(temp-ra-rb);
+}finally{
+rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
+}
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 1, INS : 0, DEL : 21
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
 }
 if(y==0){
  final double result=x*y;
  final double invx=1.0/x;
  final double invy=1.0/y;
 if(invx==0){
 if(x>0){
 return y;
 }else {
 return copySign(Math.PI,y);
 }
 }
 if(x<0||invx<0){
 if(y<0||invy<0){
 return -Math.PI;
 }else {
 return Math.PI;
 }
 }else {
 return result;
 }
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
-rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 8, INS : 0, DEL : 21
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
-}
-if(y==0){
- final double result=x*y;
- final double invx=1.0/x;
- final double invy=1.0/y;
-if(invx==0){
-if(x>0){
-return y;
-}else {
-return copySign(Math.PI,y);
-}
-}
-if(x<0||invx<0){
-if(y<0||invy<0){
-return -Math.PI;
-}else {
-return Math.PI;
-}
-}else {
-return result;
-}
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 46, UPD : 0, INS : 0, DEL : 46
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
-}
-if(y==0){
- final double result=x*y;
- final double invx=1.0/x;
- final double invy=1.0/y;
-if(invx==0){
-if(x>0){
-return y;
-}else {
-return copySign(Math.PI,y);
-}
-}
-if(x<0||invx<0){
-if(y<0||invy<0){
-return -Math.PI;
-}else {
-return Math.PI;
-}
-}else {
-return result;
-}
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
+if(y==0){
+ final double result=x*y;
+ final double invx=1.0/x;
+ final double invy=1.0/y;
+if(invx==0){
+if(x>0){
+return y;
+}else {
+return copySign(Math.PI,y);
+}
+}
+if(x<0||invx<0){
+if(y<0||invy<0){
+return -Math.PI;
+}else {
+return Math.PI;
+}
+}else {
+return result;
+}
+}
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 1, DEL : 46
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
-}
-if(y==0){
- final double result=x*y;
- final double invx=1.0/x;
- final double invy=1.0/y;
-if(invx==0){
-if(x>0){
-return y;
-}else {
-return copySign(Math.PI,y);
-}
-}
-if(x<0||invx<0){
-if(y<0||invy<0){
-return -Math.PI;
-}else {
-return Math.PI;
-}
-}else {
-return result;
-}
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
+return Math.PI;
+}
+if(y==0){
+ final double result=x*y;
+ final double invx=1.0/x;
+ final double invy=1.0/y;
+if(invx==0){
+if(x>0){
+return y;
+}else {
+return copySign(Math.PI,y);
+}
+}
+if(x<0||invx<0){
+if(y<0||invy<0){
+return -Math.PI;
+}else {
 return Math.PI;
+}
+}else {
+return result;
+}
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 1, DEL : 46
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_4_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[2575,2696]
------------Candidate---------------
 public static double atan2(double y,double x){
 if(x!=x||y!=y){
 return Double.NaN;
-}
-if(y==0){
- final double result=x*y;
- final double invx=1.0/x;
- final double invy=1.0/y;
-if(invx==0){
-if(x>0){
-return y;
-}else {
-return copySign(Math.PI,y);
-}
-}
-if(x<0||invx<0){
-if(y<0||invy<0){
-return -Math.PI;
-}else {
-return Math.PI;
-}
-}else {
-return result;
-}
 }
 if(y==Double.POSITIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return Math.PI*F_3_4;
 }
 return Math.PI*F_1_2;
 }
 if(y==Double.NEGATIVE_INFINITY){
 if(x==Double.POSITIVE_INFINITY){
 return -Math.PI*F_1_4;
 }
 if(x==Double.NEGATIVE_INFINITY){
 return -Math.PI*F_3_4;
 }
 return -Math.PI*F_1_2;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(y>0||1/y>0){
 return 0.0;
+}
+if(y==0){
+ final double result=x*y;
+ final double invx=1.0/x;
+ final double invy=1.0/y;
+if(invx==0){
+if(x>0){
+return y;
+}else {
+return copySign(Math.PI,y);
+}
+}
+if(x<0||invx<0){
+if(y<0||invy<0){
+return -Math.PI;
+}else {
+return Math.PI;
+}
+}else {
+return result;
+}
 }
 if(y<0||1/y<0){
 return -0.0;
 }
 }
 if(x==Double.NEGATIVE_INFINITY){
 if(y>0.0||1/y>0.0){
 return Math.PI;
 }
 if(y<0||1/y<0){
 return -Math.PI;
 }
 }
 if(x==0){
 if(y>0||1/y>0){
 return Math.PI*F_1_2;
 }
 if(y<0||1/y<0){
 return -Math.PI*F_1_2;
 }
 }
  final double r=y/x;
 if(Double.isInfinite(r)){
 return atan(r,0,x<0);
 }
 double ra=doubleHighPart(r);
 double rb=r-ra;
  final double xa=doubleHighPart(x);
  final double xb=x-xa;
 rb+=(y-ra*xa-ra*xb-rb*xa-rb*xb)/x;
  final double temp=ra+rb;
 rb=-(temp-ra-rb);
 ra=temp;
 if(ra==0){
 ra=copySign(0.0,y);
 }
  final double result=atan(ra,rb,x<0);
 return result;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 1, DEL : 46
Failing Tests:[org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_1]
---------START : 2019.09.04 AD at 16:05:38 CDT
---------TIME : 2019.09.04 AD at 21:05:38 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_2 | 2019.09.04 AD at 21:05:38 CDT
Already fixed : org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel_purify_2
Finish : math-4 > patch : 6 | Start : Wed Sep 04 16:05:38 CDT 2019 | End : 2019.09.04 AD at 21:05:38 CDT
