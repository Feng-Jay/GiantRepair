Repair : math_33
Current failed test : org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781 | 2019.09.05 AD at 22:09:44 CDT
Location : org.apache.commons.math3.optimization.linear.Relationship.oppositeRelationship:[59, 57]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 22:11:12 CDT - 2019.09.05 AD at 22:15:11 CDT , PNumber : 11280, CandNumber : 12 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
 switch (this){
 case LEQ :
 
-return GEQ;
+return this;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/2420/pattern-ver1-serial/Nian_Karl.QL.src.org.uva.ql.ast.value.Undefined.java-getValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
 switch (this){
 case LEQ :
 
-return GEQ;
+return null;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
 switch (this){
 case LEQ :
 
-return GEQ;
+return this.GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
 switch (this){
 case LEQ :
 
-return GEQ;
+return this.oppositeRelationship();
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+this.oppositeRelationship();
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
 switch (this){
 case LEQ :
 
-return GEQ;
+return (Relationship)(GEQ);
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+int a=0;
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+String OUTSTRING="";
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+int a=1;
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+boolean b=true;
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+Relationship GEQ=this.GEQ;
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/290/pattern-ver1-serial/nars_logic.src.main.java.nars.task.DefaultTask.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/Relationship.java[52,65]
------------Candidate---------------
 public Relationship oppositeRelationship(){
+Relationship LEQ=this.LEQ;
 switch (this){
 case LEQ :
 
 return GEQ;
 case GEQ :
 
 return LEQ;
 default :
 
 return EQ;
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/290/pattern-ver1-serial/nars_logic.src.main.java.nars.task.DefaultTask.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 22:15:48 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.linear.SimplexTableau.getSolution:[406, 407, 397, 398, 399, 401, 402, 403, 404, 405, 409, 410, 415, 420, 421, 426]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 22:16:51 CDT - 2019.09.05 AD at 23:08:34 CDT , PNumber : 11396, CandNumber : 688 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+continue;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+continue;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+continue;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+continue;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+continue;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7285/pattern-ver1-serial/src.game.Board.java-advanceGame.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients),false);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/3756/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.networkcontroller.impl.mds.MdsNetworkSystemDevice.java-createActiveZoneset.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>1?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>=0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow==null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+return null;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+return null;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+return null;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+return null;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow!=null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow!=null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;coefficients[i]<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(coefficients[i]<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients),true);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4436/pattern-ver1-serial/src.main.java.org.smartreaction.starrealms.model.players.Player.java-optionallyScrapCardsFromHandOrDiscard.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<=coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<=0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(null);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Collection;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,myUid;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex>0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i>coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+break;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+break;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+break;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+break;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+break;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow<=0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;i--){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&negativeVarColumn==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&negativeVarBasicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&mostNegative==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(1);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+negativeVarColumn);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+negativeVarBasicRow);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+mostNegative);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+basicRows);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+coefficients);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn<0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(negativeVarColumn);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7124/pattern-ver1-serial/src.server.repository.SDMSIndex.java-getUnique.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(negativeVarBasicRow);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7124/pattern-ver1-serial/src.server.repository.SDMSIndex.java-getUnique.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow>=0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn!=0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[1]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[1]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+Integer negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+Integer colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,localLevel;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow==null){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/1940/pattern-ver1-serial/src.Puissance4.java-undo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=negativeVarColumn;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=negativeVarBasicRow;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=mostNegative;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=i;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=colIndex;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=negativeVarColumn;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow>0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=2;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-((restrictToNonNegative)?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
-basicRows.add(basicRow);
+basicRows.remove(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;i++,new ArrayList<KeyBinding>()){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.ArrayList;
+
+import java.awt.event.FocusEvent;
+
+import java.awt.event.FocusAdapter;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.add(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/615/pattern-ver1-serial/bundle.jsky.util.gui.src.main.java.jsky.util.gui.TextBoxWidget.java-addWatcher.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+double[] coefficients=new double[(getOriginalNumDecisionVariables())];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:1);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4284/pattern-ver1-serial/object-filter.src.main.java.org.infinispan.objectfilter.impl.util.Interval.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0.0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+int negativeVarColumn=columnLabels.lastIndexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.lastIndexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;coefficients[i]++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:14:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;negativeVarColumn++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:16:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;mostNegative++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:18:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;negativeVarBasicRow++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow!=0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=negativeVarBasicRow;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(2);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,_afterComposeMethodCache;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(negativeVarBasicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRows!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(coefficients!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.equals(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3866/pattern-ver1-serial/Common.src.common.Mathematics.PostfixConverter.java-convertToPostfix.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+i++;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+i++;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:20:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,mActions;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:0);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1552/pattern-ver1-serial/src.main.java.net.sourceforge.fenixedu.domain.Tutorship.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;i++,new ArrayList<>()){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+coefficients[i]);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,mRelationId;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ final double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final Set<Integer> basicRows=new HashSet<Integer>();
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ final Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ final Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ final int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ final double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ final Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ final double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+int negativeVarColumn=this.columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,this.f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=this.columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+this.getSolution();
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+this.getSolution();
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+this.getSolution();
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+this.getSolution();
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+this.getSolution();
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+this.getSolution();
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+this.getSolution();
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL.trim());
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+negativeVarColumn++;
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+mostNegative++;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+mostNegative++;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+mostNegative++;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+mostNegative++;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:22:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+mostNegative++;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+colIndex++;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+negativeVarBasicRow++;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+mostNegative++;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+mostNegative++;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+i++;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+i++;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+i++;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+i++;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+i++;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+i++;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+negativeVarColumn++;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+negativeVarColumn++;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+negativeVarColumn++;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+negativeVarColumn--;
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+mostNegative--;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+mostNegative--;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+mostNegative--;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+mostNegative--;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+mostNegative--;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+colIndex--;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:24:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<=coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<=0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+i--;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+i--;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+i--;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+i--;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+i--;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+i--;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+negativeVarColumn--;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+negativeVarColumn--;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+negativeVarColumn--;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+basicRows.clear();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+return null;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+return null;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+synchronized(this){
 coefficients[i]=0;
+}
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+synchronized(this){
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+synchronized(basicRows){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+basicRows.clear();
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+basicRows.clear();
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+basicRows.clear();
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow((int)(negativeVarColumn)):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+Integer basicRow=getBasicRow((int)(colIndex));
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+basicRows.clear();
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+basicRows.clear();
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.clear();
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(negativeVarColumn++);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+int negativeVarColumn=columnLabels.indexOf((NEGATIVE_VAR_COLUMN_LABEL).toLowerCase());
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+(int)(i));
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+return null;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+mostNegative++;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+synchronized(this){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0,continentName,countryCode;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+break;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+break;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:-1);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/262/pattern-ver1-serial/src.main.java.com.github.ddth.djs.bo.log.TaskLogBo.java-getDurationPickup.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
+while(true){
+
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:31:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+while(true){
+
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+while(true){
+
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+while(true){
+
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+while(true){
+
+}
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+break;
 }
+break;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+break;
 }
 }
+break;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+break;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+break;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+break;
 }
+break;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+break;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+break;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+Set<Integer> basicRows=new HashSet<Integer>(negativeVarBasicRow,negativeVarColumn);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/889/pattern-ver1-serial/src.java.org.apache.cassandra.gossip.hyparview.HyParViewService.java-HyParViewService.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=-1&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7619/pattern-ver1-serial/src.main.org.deidentifier.arx.algorithm.FLASHAlgorithmImpl.java-binarySearch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+basicRows.clear();
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+synchronized(this){
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+synchronized(this){
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+synchronized(this){
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;i++,Charset.forName("UTF-8")){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows!=null){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRow!=null){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(!basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow==null){
+continue;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/816/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.client.renderer.RendererRelocator.java-renderTileEntityAt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+if(0!=0){
 coefficients[i]=0;
+}
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if((basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)!=0){
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+if(0-(restrictToNonNegative?0:mostNegative)!=0){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRow>0){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,30-(getRhsOffset()));
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,30-(f.getValue(coefficients)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,30-(getRhsOffset())))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ final int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:36:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ final int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ final int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ @SuppressWarnings("UnusedAssignment") int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ @SuppressWarnings("UnusedAssignment") int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ @SuppressWarnings("UnusedAssignment") int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ @SuppressWarnings("UnusedAssignment") double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ @SuppressWarnings("UnusedAssignment") int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
+ @SuppressWarnings("UnusedAssignment") Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ @SuppressWarnings("UnusedAssignment") int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ @SuppressWarnings("UnusedAssignment") Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ @SuppressWarnings("UnusedAssignment") int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ @SuppressWarnings("UnusedAssignment") double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ @SuppressWarnings("UnusedAssignment") Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ @SuppressWarnings("UnusedAssignment") int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ @SuppressWarnings("UnusedAssignment") Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]=negativeVarColumn;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+i=negativeVarColumn;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+colIndex=negativeVarColumn;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+coefficients=coefficients;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
-int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+ final int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+ final double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+ final Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+basicRows.remove(null);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4839/pattern-ver1-serial/runtime.src.main.java.com.flipkart.flux.resource.StateMachineResource.java-getGraphData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+if(i==4){
+continue;
+}
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if(i==4){
+continue;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(i==4){
+continue;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:37:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.isEmpty()){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRows!=null){
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+basicRow=1000;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(true){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(true){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)==false){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*negativeVarColumn;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*negativeVarBasicRow;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*mostNegative;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*i;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*colIndex;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=0*negativeVarColumn;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+if(columnLabels!=null){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+basicRows.add(colIndex);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5858/pattern-ver1-serial/Compile.app.src.main.java.compile_inc.compile.ContactDatabaseHandler.java-dbGetAllContacts.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRow!=null){
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Arrays;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+Arrays.sort(coefficients);
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+ final Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
-double[] coefficients=new double[getOriginalNumDecisionVariables()];
+ final Set<Integer> basicRows=new HashSet<Integer>();
+ final double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0xEfffffff&(0);
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>0/2?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+int a=0;
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+int a=0;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+int a=0;
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+int a=0;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+int a=0;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+int a=0;
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+int a=0;
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,2.0*(f.getValue(coefficients)));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3214/pattern-ver1-serial/src.agents.manic.TransitionModel.java-anticipateNextBeliefsInPlace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-coefficients[i];
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-coefficients[i];
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-negativeVarColumn;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-negativeVarColumn;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-colIndex;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-negativeVarBasicRow;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-colIndex;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-negativeVarBasicRow;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-basicRow;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-basicRow;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=(negativeVarColumn>0)?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=(negativeVarBasicRow==null)?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=((basicRow==null)?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRow!=null){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset()-22);
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()-22))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients)-22);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow==0.0){
+continue;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+String OUTSTRING="";
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+String OUTSTRING="";
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+String OUTSTRING="";
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+String OUTSTRING="";
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+String OUTSTRING="";
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+String OUTSTRING="";
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+String OUTSTRING="";
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+if(basicRows.isEmpty()){
+return null;
+}
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRows.isEmpty()){
+return null;
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows.isEmpty()){
+return null;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
+i++;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+i++;
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+i++;
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+i++;
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+i++;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+i++;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+int columnLabels=5;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:1;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4284/pattern-ver1-serial/object-filter.src.main.java.org.infinispan.objectfilter.impl.util.Interval.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:1)-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4284/pattern-ver1-serial/object-filter.src.main.java.org.infinispan.objectfilter.impl.util.Interval.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,Math.round(getRhsOffset()));
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,Math.round(f.getValue(coefficients)));
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,Math.round(getRhsOffset())))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(Double.isNaN(colIndex)){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)==true){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-mostNegative;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-mostNegative;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(Math.abs(negativeVarColumn)):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
-for(int i=0;i<coefficients.length;i++){
+for(int i=0;i<coefficients.length;Math.abs(i++)){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
-Integer basicRow=getBasicRow(colIndex);
+Integer basicRow=getBasicRow(Math.abs(colIndex));
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(equals(negativeVarColumn)){
+return null;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(equals(negativeVarBasicRow)){
+return null;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(equals(colIndex)){
+return null;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(equals(basicRow)){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+if(equals(coefficients)){
+return null;
+}
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(equals(basicRow)){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+int indexSelection=0;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+int indexSelection=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+int indexSelection=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+int indexSelection=0;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+int indexSelection=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+int indexSelection=0;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,Math.max(negativeVarBasicRow,getRhsOffset()));
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,Math.max(basicRow,getRhsOffset())))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Arrays;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i-1]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Arrays;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i-1]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:-1;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/262/pattern-ver1-serial/src.main.java.com.github.ddth.djs.bo.log.TaskLogBo.java-getDurationPickup.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:-1)-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/262/pattern-ver1-serial/src.main.java.com.github.ddth.djs.bo.log.TaskLogBo.java-getDurationPickup.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows.equals("sounds")){
+continue;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(basicRow.equals("sounds")){
+continue;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRow.equals("sounds")){
+continue;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:52:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(coefficients.equals("sounds")){
+continue;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:0;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1552/pattern-ver1-serial/src.main.java.net.sourceforge.fenixedu.domain.Tutorship.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:0)-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1552/pattern-ver1-serial/src.main.java.net.sourceforge.fenixedu.domain.Tutorship.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+int a=1;
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+int a=1;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+int a=1;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+int a=1;
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+int a=1;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+int a=1;
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+int a=1;
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+String columnLabels="%#.&f";
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset()+1);
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()+1))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients)+1);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7285/pattern-ver1-serial/jm-prta-parser.src.main.java.org.meyerlab.nopence.jm_prta_parser.attributes.NumericAttribute.java-getBinByValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+boolean columnLabels=true;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+boolean b=true;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+boolean b=true;
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+boolean b=true;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+boolean b=true;
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+boolean b=true;
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+boolean b=true;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+boolean b=true;
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRows==null){
+continue;
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows==null){
+continue;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+if(basicRows==null){
+continue;
+}
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRows==null){
+return null;
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(negativeVarBasicRow==null){
+return null;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows==null){
+return null;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+if(basicRows==null){
+return null;
+}
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow==null){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows==null){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+if(coefficients==null){
+return null;
+}
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+if(columnLabels==null){
+return null;
+}
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRows==null){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRow==null){
+return null;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(basicRow==null){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRow==null){
+return null;
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(coefficients==null){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:54:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+synchronized(this){
 coefficients[i]=0;
 continue;
+}
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+synchronized(this){
 coefficients[i]=0;
+}
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if(coefficients==null){
+return null;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if("&null".equals(negativeVarColumn)){
+return null;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if("&null".equals(negativeVarBasicRow)){
+return null;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if("&null".equals(basicRows)){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if("&null".equals(basicRows)){
+return null;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if("&null".equals(mostNegative)){
+return null;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+if("&null".equals(basicRows)){
+return null;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+if("&null".equals(mostNegative)){
+return null;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if("&null".equals(basicRows)){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if("&null".equals(mostNegative)){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if("&null".equals(mostNegative)){
+return null;
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+basicRows.add(basicRow);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+basicRows.add(basicRow);
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+basicRows.add(basicRow);
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+basicRows.add(basicRow);
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+basicRows.add(basicRow);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+basicRows.add(basicRow);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:55:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+basicRows.add(basicRow);
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+basicRows.add(basicRow);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+basicRows.add(basicRow);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
-basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
-basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+basicRows.add(basicRow);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
-basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+basicRows.add(basicRow);
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+basicRows.add(basicRow);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
-basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows.size()>0){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(!(basicRows==null)){
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(!basicRows.contains(basicRow)){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(!basicRow.equals("")){
 basicRows.add(basicRow);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+basicRows.add(basicRow);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5594/pattern-ver1-serial/app.src.main.java.com.dirkgassen.wator.simulator.SimulatorRunnable.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(negativeVarColumn<0){
+return null;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(negativeVarBasicRow<0){
+return null;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow<0){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(colIndex<0){
+return null;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(basicRow<0){
+return null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRow<0){
+return null;
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow.equals("-1")){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(negativeVarBasicRow.equals("-1")){
+return null;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:56:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.equals("-1")){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+if(coefficients.equals("-1")){
+return null;
+}
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||colIndex==Long.MIN_VALUE){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+Set<Integer> basicRows=new HashSet<Integer>();
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
-Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+Set<Integer> basicRows=new HashSet<Integer>();
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+if(coefficients==null){
+return null;
+}
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
+if(coefficients==null){
+return null;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+assert (negativeVarBasicRow!=null);
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+assert (basicRows!=null);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+assert (basicRows!=null);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+assert (basicRows!=null);
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+assert (basicRows!=null);
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+assert (!basicRows.isEmpty());
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+assert (!basicRows.isEmpty());
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+assert (!basicRows.isEmpty());
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+assert (!basicRows.isEmpty());
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows.contains(basicRow)){
+return null;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows!=null){
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+}else {
+if(basicRows!=null){
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+if(basicRows!=null){
+int colIndex=columnLabels.indexOf("x"+i);
+if(colIndex<0){
+coefficients[i]=0;
+continue;
+}
+Integer basicRow=getBasicRow(colIndex);
+if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
+}else {
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+}
+}
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRows.contains(basicRow)){
+return null;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+if(coefficients[i]==0){
+return null;
+}
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(coefficients[i]==0){
+return null;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
+if(coefficients[i]==0){
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+if(coefficients[i]==0){
+return null;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if(coefficients[i]==0){
+return null;
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+if(coefficients[i]==0){
+return null;
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+assert (negativeVarColumn!=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL));
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+assert (basicRows!=new HashSet<Integer>());
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+assert (coefficients!=new double[getOriginalNumDecisionVariables()]);
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+assert (basicRow!=getBasicRow(colIndex));
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+assert (colIndex!=columnLabels.indexOf("x"+i));
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+assert (basicRow!=null);
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+assert (basicRow!=null);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]++;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
+coefficients[i]++;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]++;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
+coefficients[i]++;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=-1;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]++;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]++;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]++;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
+coefficients[i]++;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]++;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=-1;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]++;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+assert (basicRows!=null);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+assert (basicRows!=null);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+assert (basicRows!=null);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+assert (coefficients!=null);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||"查看红包".equals(colIndex)){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return this.getSolution();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||colIndex==3){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows!=null&&basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+if(basicRows.isEmpty()){
+basicRows=null;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if(basicRows.isEmpty()){
+basicRows=null;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.isEmpty()){
+basicRows=null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+if(basicRows.isEmpty()){
+basicRows=null;
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]=0;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+coefficients[i]=0;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+coefficients[i]=0;
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.05 AD at 23:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+coefficients[i]=0;
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+coefficients[i]=0;
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+coefficients[i]=0;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+coefficients[i]=0;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]=0;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+coefficients[i]=0;
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
 continue;
 }
+coefficients[i]=0;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+coefficients[i]=0;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)||basicRows.contains("{")){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1752/pattern-ver1-serial/DicGenerator.ExpansionGenerator.java-exFilter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return (PointValuePair)new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow>=0&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
 coefficients[i]=0;
+if(colIndex<0){
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if((basicRows!=null)&&(basicRows.contains(basicRow))){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if((basicRow!=null||basicRow=='\'')&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]=0;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||colIndex==0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0||colIndex>9){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+negativeVarColumn);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+negativeVarBasicRow);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+mostNegative);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+basicRows);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+coefficients);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+int colIndex=columnLabels.indexOf("x"+i+" -u "+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+coefficients[i]=0;
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0&&colIndex<4000000){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+Integer negativeVarBasicRow=negativeVarColumn>=0&&negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1500/pattern-ver1-serial/src.bms.player.beatoraja.select.BarRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow>=0&&negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1500/pattern-ver1-serial/src.bms.player.beatoraja.select.BarRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow>=0&&basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1500/pattern-ver1-serial/src.bms.player.beatoraja.select.BarRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(colIndex<0&&colIndex!=9999){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
+if(0>0&&colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRow!=null&&basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V26/2138/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.Volume.java-getVolumeAccessStateDisplayName.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows==null||basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+assert (negativeVarColumn>=0):"Receive a negative tratment";
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+assert (mostNegative>=0):"Receive a negative tratment";
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+assert (negativeVarBasicRow>=0):"Receive a negative tratment";
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+assert (mostNegative>=0):"Receive a negative tratment";
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+assert (mostNegative>=0):"Receive a negative tratment";
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+assert (mostNegative>=0):"Receive a negative tratment";
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return (PointValuePair)(new PointValuePair(coefficients,f.getValue(coefficients)));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+assert (coefficients!=null):"Appointments day is not allowed to be null!";
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+assert (coefficients!=null):"Appointments day is not allowed to be null!";
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+assert (negativeVarBasicRow!=null):"Appointments day is not allowed to be null!";
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+assert (basicRows!=null):"Appointments day is not allowed to be null!";
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+assert (basicRows!=null):"Appointments day is not allowed to be null!";
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+assert (basicRows!=null):"Appointments day is not allowed to be null!";
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+assert (negativeVarColumn!=0):"Receive a size tratment";
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+assert (mostNegative!=0):"Receive a size tratment";
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+assert (negativeVarBasicRow!=0):"Receive a size tratment";
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+assert (mostNegative!=0):"Receive a size tratment";
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+assert (mostNegative!=0):"Receive a size tratment";
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+assert (mostNegative!=0):"Receive a size tratment";
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRows==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(colIndex>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(mostNegative>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+coefficients[i]=0;
+if(coefficients[i]<0){
 coefficients[i]=0;
+}
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(coefficients[i]<0){
+coefficients[i]=0;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
+if(coefficients[i]<0){
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if(coefficients[i]<0){
+coefficients[i]=0;
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+if(coefficients[i]<0){
+coefficients[i]=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+if(coefficients[i]<0){
+coefficients[i]=0;
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow<=0){
+basicRow=1;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
+}
+if(colIndex<=0){
+colIndex=1;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean haveBreadCrumbs=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
-int colIndex=columnLabels.indexOf("x"+i);
+ final String dropStatement="x"+i;
+int colIndex=columnLabels.indexOf(dropStatement);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*2;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=0*2;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow.equals(null)&&basicRow.equals(0)){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3979/pattern-ver1-serial/PrimaryHelper.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&!basicRow.equals("全部")){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset()-1);
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()-1))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset()-1);
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients)-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()-1))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
-return new PointValuePair(coefficients,f.getValue(coefficients));
+return new PointValuePair(coefficients,f.getValue(coefficients)-1);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]=0;
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+coefficients[i]=0;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+coefficients[i]=0;
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=0;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+if(basicRows!=null){
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow==0||"查看红包".equals(basicRow!=null)){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null&&basicRow==0||basicRow=='%'){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=basicRow==null?0:getEntry(basicRow,getRhsOffset())*100-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow<0L||(basicRow!=null&&basicRow==0)){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:04:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2886/pattern-ver1-serial/BackChina.src.com.android.backchina.fragment.TabSubscribeFragment.java-handleMySubscribeResponse.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(true){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=basicRow==null?0:getEntry(basicRow,getRhsOffset())*5-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=basicRow-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))/2-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(negativeVarBasicRow==null){
+throw new IllegalStateException("User isn't registered! "+negativeVarColumn);
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow==null){
+throw new IllegalStateException("User isn't registered! "+colIndex);
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+synchronized(this){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(colIndex<0){
+coefficients[i]=0;
+continue;
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*2;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative)*2;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean haveBreadCrumbs=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+haveBreadCrumbs=true;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean haveBreadCrumbs=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+haveBreadCrumbs=true;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean haveBreadCrumbs=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+haveBreadCrumbs=true;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+boolean haveBreadCrumbs=false;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+haveBreadCrumbs=true;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+boolean haveBreadCrumbs=false;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&haveBreadCrumbs){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+haveBreadCrumbs=true;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(basicRows==null||basicRow==null){
+throw new NullPointerException();
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+if(basicRows==null||basicRow==null){
+throw new NullPointerException();
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRows==null||basicRow==null){
+throw new NullPointerException();
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean succeeded=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+succeeded=true;
 }
+if(!succeeded){
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+boolean succeeded=false;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(!succeeded){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+succeeded=true;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean succeeded=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+succeeded=true;
+}
 }
+if(!succeeded){
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+boolean succeeded=false;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(!succeeded){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+succeeded=true;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean succeeded=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+succeeded=true;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
+if(!succeeded){
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+boolean succeeded=false;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+succeeded=true;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
+if(!succeeded){
+return null;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+boolean succeeded=false;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(!succeeded){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+succeeded=true;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(negativeVarColumn==3){
+System.out.println("debug");
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+if(negativeVarColumn==3){
+System.out.println("debug");
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+if(negativeVarColumn==3){
+System.out.println("debug");
+}
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if(negativeVarColumn==3){
+System.out.println("debug");
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(negativeVarBasicRow==3){
+System.out.println("debug");
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+if(negativeVarBasicRow==3){
+System.out.println("debug");
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+if(negativeVarBasicRow==3){
+System.out.println("debug");
+}
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if(negativeVarBasicRow==3){
+System.out.println("debug");
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+if(mostNegative==3){
+System.out.println("debug");
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+if(mostNegative==3){
+System.out.println("debug");
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+if(mostNegative==3){
+System.out.println("debug");
+}
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+if(mostNegative==3){
+System.out.println("debug");
+}
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/4434/pattern-ver1-serial/gui.src.main.java.org.jboss.as.console.client.shared.subsys.messaging.forms.ConnectorForm.java-asWidget.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(negativeVarColumn<0){
+negativeVarColumn--;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
+if(negativeVarBasicRow<0){
+negativeVarBasicRow--;
+}
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(negativeVarColumn<0){
+negativeVarColumn--;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+if(mostNegative<0){
+mostNegative--;
+}
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
+if(basicRow!=null){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
+if(basicRows.contains(basicRow)&&basicRow==0){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
-double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V14/831/pattern-ver1-serial/src.main.java.de.uni_potsdam.hpi.bpt.bp2014.jcore.rest.RestInterface.java-getOutputDataObjectsAndAttributes.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=1;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=-1;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)*negativeVarColumn;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=negativeVarColumn;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()));
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=2;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0.0;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)+1;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
-continue;
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
+continue;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(negativeVarColumn<3){
+negativeVarColumn=3;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+if(mostNegative<3){
+mostNegative=3;
+}
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
+if(colIndex<0){
+colIndex=0;
+}
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow<0){
+basicRow=0;
+}
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+if(negativeVarColumn<0){
+negativeVarColumn=0;
+}
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+if(mostNegative<0){
+mostNegative=0;
+}
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/399/pattern-ver1-serial/src.client.panel.FormEntryPanel.java-keyPressed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+long startTime=System.currentTimeMillis();
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+long startTime=System.currentTimeMillis();
 coefficients[i]=0;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+long startTime=System.currentTimeMillis();
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
+long startTime=System.currentTimeMillis();
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+long startTime=System.currentTimeMillis();
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
+long startTime=System.currentTimeMillis();
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
-coefficients[i]=0;
+coefficients[i]=0*2;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)*2;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
+coefficients[i]=0*2;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)*2;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.size()==0){
+return null;
+}
+if((basicRows.size()<=1)||(negativeVarColumn==0)){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4230/pattern-ver1-serial/src.main.java.net.sf.mzmine.modules.peaklistmethods.dataanalysis.heatmaps.HeatMapTask.java-groupingDataset.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.size()==0){
+return null;
+}
+if((basicRows.size()<=1)||(mostNegative==0)){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4230/pattern-ver1-serial/src.main.java.net.sf.mzmine.modules.peaklistmethods.dataanalysis.heatmaps.HeatMapTask.java-groupingDataset.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
+if(basicRows.size()==0){
+return null;
+}
+if((basicRows.size()<=1)||(negativeVarBasicRow==0)){
+return null;
+}
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4230/pattern-ver1-serial/src.main.java.net.sf.mzmine.modules.peaklistmethods.dataanalysis.heatmaps.HeatMapTask.java-groupingDataset.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+try{
 basicRows.add(basicRow);
+}finally{
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 1, INS : 0, DEL : 14
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative)*2;
 }else {
 basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative)*2;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+coefficients[28]=(byte)0x88;
+coefficients[29]=0x58;
+coefficients[30]=0x01;
+coefficients[31]=0x00;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
+coefficients[i]=Math.round(coefficients[i]*100.0)/100.0;
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
+coefficients[i]=Math.round(coefficients[i]*100.0)/100.0;
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
+for(int i=0;i<4;i++){
+coefficients[i]=Math.min(1,Math.max(0,coefficients[i]));
+}
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
-}else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}else {
+basicRows.add(basicRow);
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
-}else {
-if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
-}
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 28, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
-if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
-}else {
-basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
-}
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 28, UPD : 28, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+}else {
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 0, INS : 1, DEL : 28
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+}else {
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 0, INS : 1, DEL : 28
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 0, INS : 1, DEL : 28
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
-}else {
-if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
-}else {
-basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
-}
-}
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 39, UPD : 0, INS : 0, DEL : 39
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
+}else {
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
+}else {
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
 }else {
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+}
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 1, DEL : 39
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
 if(colIndex<0){
 coefficients[i]=0;
 continue;
 }
 Integer basicRow=getBasicRow(colIndex);
+if(basicRow!=null&&basicRow==0){
+coefficients[i]=0;
+}else {
 if(basicRow!=null&&basicRow==0){
 coefficients[i]=0;
+}else {
+if(basicRows.contains(basicRow)){
+coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
+basicRows.add(basicRow);
+coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
+}
+}
 if(basicRows.contains(basicRow)){
 coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
 }else {
 basicRows.add(basicRow);
 coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
 }
 }
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 0, INS : 1, DEL : 39
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[391,427]
------------Candidate---------------
 protected PointValuePair getSolution(){
 int negativeVarColumn=columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
 Integer negativeVarBasicRow=negativeVarColumn>0?getBasicRow(negativeVarColumn):null;
 double mostNegative=negativeVarBasicRow==null?0:getEntry(negativeVarBasicRow,getRhsOffset());
 Set<Integer> basicRows=new HashSet<Integer>();
 double[] coefficients=new double[getOriginalNumDecisionVariables()];
 for(int i=0;i<coefficients.length;i++){
 int colIndex=columnLabels.indexOf("x"+i);
-if(colIndex<0){
-coefficients[i]=0;
-continue;
-}
 Integer basicRow=getBasicRow(colIndex);
-if(basicRow!=null&&basicRow==0){
-coefficients[i]=0;
-}else {
-if(basicRows.contains(basicRow)){
-coefficients[i]=0-(restrictToNonNegative?0:mostNegative);
-}else {
-basicRows.add(basicRow);
-coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
-}
-}
 }
 return new PointValuePair(coefficients,f.getValue(coefficients));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 78, UPD : 4, INS : 0, DEL : 74
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:10:32 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.linear.SimplexTableau.normalize:[261, 265, 260]#0.4472135954999579
Compute Candidate : 2019.09.06 AD at 00:11:25 CDT - 2019.09.06 AD at 00:19:56 CDT , PNumber : 11392, CandNumber : 62 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<=0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()>0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(-2),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-2*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply((int)(-1)),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+synchronized(this){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+if(constraint!=null){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+int a=0;
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+int a=0;
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+String OUTSTRING="";
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+String OUTSTRING="";
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(Math.abs(-1)),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(equals(constraint)){
+return null;
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+if(equals(constraint)){
+return null;
+}
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+int a=1;
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+int a=1;
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+boolean b=true;
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+boolean b=true;
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint==null){
+return null;
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+if(constraint==null){
+return null;
+}
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
+if(constraint==null){
+return null;
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint.getRelationship()==null){
+return null;
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint.getCoefficients()==null){
+return null;
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
+if("&null".equals(constraint)){
+return null;
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:22:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(true){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:22:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0==false){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()==Long.MIN_VALUE){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+assert (constraint!=null);
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+assert (constraint!=null);
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(Double.isNaN(constraint.getValue())){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0==true){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint!=null){
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+if(constraint!=null){
+if(constraint.getValue()<0){
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
+return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
+}
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
+assert (constraint!=null);
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(Math.max(-1,0)),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V6/6142/pattern-ver1-serial/main.java.rowautomation.renders.RenderBlockCrossing.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||"查看红包".equals(constraint.getValue())){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()==3){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint!=null&&constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()==0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue()*2);
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V10/2630/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()>9){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0&&constraint.getValue()<4000000){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0&&constraint.getValue()!=9999){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(0>0&&constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint==null||constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+assert (constraint!=null):"Appointments day is not allowed to be null!";
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+assert (constraint!=null):"Appointments day is not allowed to be null!";
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
-if(constraint.getValue()<0){
+if(constraint.getValue()<0||constraint.getValue()=='"'){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
+if(constraint==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
+if(constraint==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+if(constraint.getRelationship()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
-return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
-return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
+return (LinearConstraint)new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
-return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
+return constraint;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
-return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
+return (LinearConstraint)(new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue()));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return null;
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
+synchronized(this){
 return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+}
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return (LinearConstraint)new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return constraint;
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2016/V40/3906/pattern-ver1-serial/tetrad-lib.src.main.java.edu.cmu.tetrad.algcomparison.algorithm.oracle.pag.Ccd.java-getComparisonGraph.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[254,267]
------------Candidate---------------
 private LinearConstraint normalize(LinearConstraint constraint){
 if(constraint.getValue()<0){
-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue());
+return (LinearConstraint)(new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),constraint.getRelationship().oppositeRelationship(),-1*constraint.getValue()));
 }
 return new LinearConstraint(constraint.getCoefficients(),constraint.getRelationship(),constraint.getValue());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 00:27:31 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.linear.SimplexTableau.dropPhase1Objective:[339, 347, 332, 333, 336, 337, 338, 344, 345, 346, 351, 352, 353, 354, 355, 356, 361, 362, 365, 366, 367, 328]#0.4472135954999579
Compute Candidate : 2019.09.06 AD at 00:28:38 CDT - 2019.09.06 AD at 01:22:39 CDT , PNumber : 11428, CandNumber : 871 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+return ;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+return ;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+return ;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
+return ;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+return ;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+return ;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+continue;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+continue;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+continue;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+continue;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+continue;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+continue;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+continue;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+continue;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+return ;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+return ;
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+return ;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
+ int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>1){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==0){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>=0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=1;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();this.numArtificialVariables<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;this.numArtificialVariables<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;this.numArtificialVariables<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;this.numArtificialVariables<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(i,i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/1763/pattern-ver1-serial/MyApplication.app.src.main.java.com.gcode.notes.controllers.BaseController.java-setNewContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<=getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:25:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<=getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j<=getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+List<Integer> columnsToDrop=new ArrayList<Integer>(null);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Collection;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),myUid;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Collection;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,myUid;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Collection;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,myUid;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),DEFAULT_TIMEOUT2;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,DEFAULT_TIMEOUT2;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(i,0);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(col,0);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.add(0,0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(i,col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i>getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i>getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i>getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j>getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;i>0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),MAX_SERVICE_NODES;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,MAX_SERVICE_NODES;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,MAX_SERVICE_NODES;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),MAX_ZK_WAIT_RETRY_TIMES;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,MAX_ZK_WAIT_RETRY_TIMES;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+break;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+break;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+break;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+break;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+break;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+break;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=2;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()<=1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=3;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i-getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i--){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();i--){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();i--){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col--]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j<getWidth();j--){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+List<Integer> columnsToDrop=new ArrayList<Integer>(1);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((Integer)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/1684/pattern-ver1-serial/src.jpkmn.game.battle.Battle.java-remove.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(col,i);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/6885/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.gateway.src.main.java.org.wso2.carbon.apimgt.gateway.handlers.logging.APILogMessageHandler.java-mediate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+i;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()>=1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)!=0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()!=1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)!=null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5284/pattern-ver1-serial/src.servlets.CheckUsername.java-processRequest.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+Integer col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
+Integer col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(1,i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(1,col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.add(1,0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[getHeight()-2][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-2;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-2][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,entry;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),localLevel;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,localLevel;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,localLevel;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.remove(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2156/pattern-ver1-serial/src.server.Server.java-addScheduledFailure.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=10;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()>1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-i][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-col][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.get(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/4761/pattern-ver1-serial/src.main.java.org.la4j.vector.source.UnsafeVectorSource.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.get(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/4761/pattern-ver1-serial/src.main.java.org.la4j.vector.source.UnsafeVectorSource.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(col,col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2403/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.Indexer.java-getFrame.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[getHeight()-1][getHeight()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/4077/pattern-ver1-serial/src.com.edisonwang.stackedview.view.StackedView.java-prepareScrollingToBottom.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j<getHeight();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/4077/pattern-ver1-serial/src.com.edisonwang.stackedview.view.StackedView.java-prepareScrollingToBottom.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.remove(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.remove(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.remove(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++,new ArrayList<KeyBinding>()){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();i++,new ArrayList<KeyBinding>()){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();i++,new ArrayList<KeyBinding>()){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=100;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>3){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;i>=0.0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;i<=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.get(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/5881/pattern-ver1-serial/aslibrary.src.main.java.com.hitomi.aslibrary.ActivityManager.java-getPreActivity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(getHeight())][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(1)][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(getWidth())][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(i,2);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(col,2);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.add(0,2);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;i>=0;i++){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(this.numArtificialVariables==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)<0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1401/pattern-ver1-serial/XMLC.src.Learner.PLTFH.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+List<Integer> columnsToDrop=new ArrayList<Integer>(2);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),_afterComposeMethodCache;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1,_afterComposeMethodCache;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,_afterComposeMethodCache;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+3;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.equals(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3866/pattern-ver1-serial/Common.src.common.Mathematics.PostfixConverter.java-convertToPostfix.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+i++;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+i++;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+i++;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.List;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),mActions;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.List;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,mActions;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.List;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,mActions;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++,new ArrayList<>()){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();i++,new ArrayList<>()){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();i++,new ArrayList<>()){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),mRelationId;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1,mRelationId;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,mRelationId;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ final List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ final double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ final List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ final int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
+ int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
+ int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=this.tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=this.tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+this.columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+this.dropPhase1Objective();
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+this.dropPhase1Objective();
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+this.dropPhase1Objective();
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+this.dropPhase1Objective();
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+this.dropPhase1Objective();
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+this.dropPhase1Objective();
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+this.dropPhase1Objective();
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+this.dropPhase1Objective();
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+this.dropPhase1Objective();
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+this.dropPhase1Objective();
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop.isEmpty()){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop.isEmpty()){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.isEmpty()){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Iterator;
+
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==-1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(columnsToDrop==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+col++;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+col++;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+col++;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+col++;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+i++;
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+i++;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+i++;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+i++;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+i++;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+i++;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+i++;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][1]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+col--;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+col--;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][i]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[getHeight()-1][getWidth()-2];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<=getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j<=getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<=getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<=getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<=getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<=getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<=getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
-for(int j=0;j<getWidth();j++){
+for(int j=0;j<=getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:38:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+i--;
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+i--;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+i--;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+i--;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+i--;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+i--;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+col++;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][0]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][2]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+columnsToDrop.clear();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6396/pattern-ver1-serial/core.src.com.FOS.Pixel.screens.GameScreen.java-checkCollectedOrbs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+synchronized(this){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+synchronized(this){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+synchronized(columnsToDrop){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+synchronized(columnsToDrop){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+synchronized(columnsToDrop){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+synchronized(columnLabels){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:45:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+columnsToDrop.clear();
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:45:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+columnsToDrop.clear();
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+columnsToDrop.clear();
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+columnsToDrop.clear();
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+columnsToDrop.clear();
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+columnsToDrop.clear();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+columnsToDrop.clear();
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add((int)(i));
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add((int)(col));
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.add((int)(0));
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow((int)(col))==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains((int)(j))){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop.clear();
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:48:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+columnsToDrop.clear();
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+columnsToDrop.clear();
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+columnsToDrop.clear();
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+columnsToDrop.clear();
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+columnsToDrop.clear();
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+columnsToDrop.clear();
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5052/pattern-ver1-serial/proxy.src.main.java.com.xqbase.tuna.proxy.ProxyServer.java-returnClient.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+columnsToDrop.clear();
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(columnsToDrop.size())][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/2063/pattern-ver1-serial/src.minecraft.co.uk.flansmods.common.BlockPlaneWorkbench.java-getBlockTextureFromSideAndMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
+this.tableau=null;
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+(int)(getArtificialVariableOffset());
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+-1;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+synchronized(this){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+synchronized(this){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions(),continentName,countryCode;i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0,continentName,countryCode;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1,continentName,countryCode;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(equals(col)){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(equals(columnsToDrop)){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(equals(col)){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(equals(columnsToDrop)){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(equals(columnsToDrop)){
+return ;
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(equals(entry)){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+break;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+break;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+break;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+break;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
+while(true){
+
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
+while(true){
+
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+while(true){
+
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:56:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+while(true){
+
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 01:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+while(true){
+
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+while(true){
+
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+while(true){
+
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+while(true){
+
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+break;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+break;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+break;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+break;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+break;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+break;
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+break;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+break;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()>0){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+columnsToDrop.clear();
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:07:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+i--;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+i--;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+synchronized(this){
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+synchronized(this){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+synchronized(this){
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+synchronized(this){
 if(getNumObjectiveFunctions()==1){
 return ;
+}
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.isEmpty()){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.isEmpty()){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.isEmpty()){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(columnsToDrop.isEmpty()){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/2662/pattern-ver1-serial/letter-annotator-api.src.main.java.org.modelcatalogue.letter.annotator.AbstractHighlighter.java-highlight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop==null){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop==null){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop==null){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop==null){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop==null){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop==null){
+return ;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(columnsToDrop==null){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(columnsToDrop==null){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop==null){
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop==null){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop==null){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop==null){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop==null){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop==null){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop==null){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(matrix==null){
+return ;
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++,Charset.forName("UTF-8")){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();i++,Charset.forName("UTF-8")){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();i++,Charset.forName("UTF-8")){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop!=null){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop!=null){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop!=null){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnLabels!=null){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop=new ArrayList<>();
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/486/pattern-ver1-serial/app.src.main.java.com.rubengees.vocables.pojo.Unit.java-readFromParcel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+columnsToDrop=new ArrayList<>();
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/486/pattern-ver1-serial/app.src.main.java.com.rubengees.vocables.pojo.Unit.java-readFromParcel.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
+if(columnsToDrop==null){
+return ;
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(tableau==null){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
+if(columnsToDrop==new ArrayList<Integer>()){
+return ;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+synchronized(this){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+synchronized(this){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+synchronized(this){
 return ;
+}
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+if(0!=0){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+if(tableau.getEntry(i,j)!=0){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(i>0){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(col>0){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(0>0){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if((int)columnsToDrop.get(i)>0){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if("index".equals(columnsToDrop)){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if("index".equals(columnsToDrop)){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if("index".equals(columnsToDrop)){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if("index".equals(columnsToDrop)){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if("index".equals(columnsToDrop)){
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if("index".equals(columnsToDrop)){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if("index".equals(columnsToDrop)){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if("index".equals(columnsToDrop)){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if("index".equals(entry)){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.equals("TIME")){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if("&null".equals(columnsToDrop)){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if("&null".equals(columnsToDrop)){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if("&null".equals(columnsToDrop)){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if("&null".equals(columnsToDrop)){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if("&null".equals(columnsToDrop)){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if("&null".equals(columnsToDrop)){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if("&null".equals(columnsToDrop)){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if("&null".equals(entry)){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop.equals("DATETIME")){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(columnsToDrop.equals("DATETIME")){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(columnsToDrop==null){
+return ;
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(30-(0),i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,30-(i));
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(30-(i),j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,30-(j));
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ @SuppressWarnings("UnusedAssignment") List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ @SuppressWarnings("UnusedAssignment") double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ @SuppressWarnings("UnusedAssignment") int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ @SuppressWarnings("UnusedAssignment") List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ @SuppressWarnings("UnusedAssignment") double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ @SuppressWarnings("UnusedAssignment") double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ @SuppressWarnings("UnusedAssignment") List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ @SuppressWarnings("UnusedAssignment") double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
+ @SuppressWarnings("UnusedAssignment") int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
-List<Integer> columnsToDrop=new ArrayList<Integer>();
+ @SuppressWarnings("UnusedAssignment") List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+ @SuppressWarnings("UnusedAssignment") int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+ @SuppressWarnings("UnusedAssignment") double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+columnsToDrop=columnsToDrop;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+i=i;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+1+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+columnsToDrop=columnsToDrop;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+col=col;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+columnsToDrop=columnsToDrop;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.equals("")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(matrix.equals("")){
+return ;
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+columnsToDrop.remove(null);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4839/pattern-ver1-serial/runtime.src.main.java.com.flipkart.flux.resource.StateMachineResource.java-getGraphData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(i==4){
+continue;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(i==4){
+continue;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(i==4){
+continue;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+if(i==4){
+continue;
+}
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(i==4){
+continue;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+if(j==4){
+continue;
+}
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:14:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+columnsToDrop.remove(0);
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+columnsToDrop.remove(0);
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+columnsToDrop.remove(0);
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+columnsToDrop.remove(0);
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop.remove(0);
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+columnsToDrop.remove(0);
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+columnsToDrop.remove(0);
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+columnsToDrop.remove(0);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/3880/pattern-ver1-serial/app.src.main.java.com.aiqing.niuniuheardsensor.activities.HSMainActivity.java-onNewIntent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+col=1000;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Arrays;
+
+import java.util.Collections;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+Collections.sort(columnsToDrop);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2616/pattern-ver1-serial/app.app.src.main.java.adapters.versions.VersionViewModel.java-createModels.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(true){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1==false){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(col<0){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(col<0){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(tableau!=null){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(this.tableau==null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.equals("-1")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(matrix.equals("-1")){
+return ;
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Arrays;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+Arrays.sort(matrix);
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.contains("deviantart.com")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(columnsToDrop.contains("deviantart.com")){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
+if(columnsToDrop.contains("deviantart.com")){
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
+if(columnsToDrop.contains("deviantart.com")){
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop.contains("deviantart.com")){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop.contains("deviantart.com")){
+return ;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(columnsToDrop.contains("deviantart.com")){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(columnsToDrop.contains("deviantart.com")){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[0][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=0xEfffffff&(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:16:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[2][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0/2){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+int a=0;
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+int a=0;
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+int a=0;
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+int a=0;
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+int a=0;
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+int a=0;
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+int a=0;
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+int a=0;
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+int a=0;
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+int a=0;
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop.equals(matrix)){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.equals(col)){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(matrix.equals(columnsToDrop)){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.equals(col)){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.equals(entry)){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(col==0.0){
+continue;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+String OUTSTRING="";
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:17:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+String OUTSTRING="";
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+String OUTSTRING="";
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+String OUTSTRING="";
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+String OUTSTRING="";
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+String OUTSTRING="";
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+String OUTSTRING="";
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+String OUTSTRING="";
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+String OUTSTRING="";
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+String OUTSTRING="";
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();){
+i++;
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();){
 int col=0;
 for(int j=0;j<getWidth();j++){
+i++;
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+i++;
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();){
+i++;
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+i++;
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();){
+i++;
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/7889/pattern-ver1-serial/src.flagmaker.Flag.java-Save.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+int tableau=5;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+int Precision=5;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.contains(col)){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.contains(col)){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(getHeight()-1)][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(Math.round(0),i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,Math.round(i));
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(Math.round(i),j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,Math.round(j));
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;Math.abs(i)>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(Double.isNaN(getNumObjectiveFunctions())){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
+if(columnsToDrop.contains(columnsToDrop)){
+return ;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
+if(columnsToDrop.contains(columnsToDrop)){
+return ;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
-int col=i+getArtificialVariableOffset();
+int col=i+(getArtificialVariableOffset()+1);
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1==true){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(Math.abs(i));
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(Math.abs(col));
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
-for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();Math.abs(i++)){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
+columnsToDrop.add(Math.abs(0));
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
-for(int i=0;i<getNumArtificialVariables();i++){
+for(int i=0;i<getNumArtificialVariables();Math.abs(i++)){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
+for(int i=1;i<getHeight();Math.abs(i++)){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()-1;i>=0;Math.abs(i--)){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(Math.abs(i)));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(Math.abs(col))==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(matrix[i-1][col++]==0){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(matrix[i-1][col++]==0){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+if(matrix[i-1][col++]==0){
+return ;
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
+if(this.numArtificialVariables==0){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+int indexSelection=0;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+int indexSelection=0;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+int indexSelection=0;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+int indexSelection=0;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+int indexSelection=0;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+int indexSelection=0;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+int indexSelection=0;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+int indexSelection=0;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
+int indexSelection=0;
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(Math.max(0,i),i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,Math.max(0,i));
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(Math.max(i,j),j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,Math.max(i,j));
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Arrays;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Arrays;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++-1]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0*2,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,i*2);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i*2,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j*2);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(matrix.equals("setPackMode")){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(matrix.equals("setPackMode")){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.equals("setPackMode")){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(columnsToDrop.equals("setPackMode")){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.equals("sounds")){
+continue;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.equals("sounds")){
+continue;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.equals("sounds")){
+continue;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:23:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.equals("sounds")){
+continue;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=(0/1000);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
+columnsToDrop.add(i+1,i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(i+1,col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositoryCitation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+int a=1;
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+int a=1;
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+int a=1;
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+int a=1;
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+int a=1;
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+int a=1;
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+int a=1;
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+int a=1;
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+int a=1;
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+int a=1;
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+boolean Precision=true;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+boolean tableau=true;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[getHeight()/2-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[getHeight()-1][getWidth()/2-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
-for(int i=columnsToDrop.size()-1;i>=0;i--){
+for(int i=columnsToDrop.size()/2-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+boolean b=true;
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+boolean b=true;
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+boolean b=true;
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+boolean b=true;
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+boolean b=true;
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+boolean b=true;
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+boolean b=true;
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+boolean b=true;
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
+boolean b=true;
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+boolean b=true;
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=1;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=-1;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col).equals(null)){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=0;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.size()<=0){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/5648/pattern-ver1-serial/applications.plugins.org.csstudio.opibuilder.src.org.csstudio.opibuilder.pvmanager.PVManagerHelper.java-formatNumberArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.size()<=0){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/5648/pattern-ver1-serial/applications.plugins.org.csstudio.opibuilder.src.org.csstudio.opibuilder.pvmanager.PVManagerHelper.java-formatNumberArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.size()<=0){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/5648/pattern-ver1-serial/applications.plugins.org.csstudio.opibuilder.src.org.csstudio.opibuilder.pvmanager.PVManagerHelper.java-formatNumberArray.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop.add(i);
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+columnsToDrop.add(i);
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+columnsToDrop.add(i);
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+columnsToDrop.add(col);
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop.add(0);
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+columnsToDrop.add(0);
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(0>=columnsToDrop.size()){
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5077/pattern-ver1-serial/src.Utils.Helper.java-getModeInt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(0>=columnsToDrop.size()){
+return ;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5077/pattern-ver1-serial/src.Utils.Helper.java-getModeInt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(0>=columnsToDrop.size()){
+return ;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/5077/pattern-ver1-serial/src.Utils.Helper.java-getModeInt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+columnsToDrop.add(i);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+columnsToDrop.add(i);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+columnsToDrop.add(i);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+columnsToDrop.add(i);
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+columnsToDrop.add(i);
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+columnsToDrop.add(i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+columnsToDrop.add(i);
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=2;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+columnsToDrop.add(i);
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+columnsToDrop.add(i);
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+columnsToDrop.add(i);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+columnsToDrop.add(col);
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+columnsToDrop.add(col);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+columnsToDrop.add(col);
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+columnsToDrop.add(col);
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+columnsToDrop.add(0);
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+columnsToDrop.add(0);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=3;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+columnsToDrop.add(0);
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+columnsToDrop.add(0);
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(getBasicRow(col)==null){
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(Precision.compareTo(entry,0.0,maxUlps)>0){
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+columnsToDrop.add(i);
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.size()>0){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.size()>0){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.size()>0){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnLabels.size()>0){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(!columnsToDrop.contains(i)){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(!columnsToDrop.contains(col)){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(!columnsToDrop.contains(0)){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(!columnLabels.contains((int)columnsToDrop.get(i))){
 columnLabels.remove((int)columnsToDrop.get(i));
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+columnsToDrop.add(i);
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+columnsToDrop.add(0);
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(true){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(true){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+columnsToDrop.add(i);
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+columnsToDrop.add(i);
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+columnsToDrop.add(i);
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+columnsToDrop.add(i);
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null==false){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)==false){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j)*i;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j)*col;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j)*j;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove("https://myschool.ru.is/myschool/"+(int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=this.tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+this.columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2168/pattern-ver1-serial/src.main.java.app.lsgui.gui.channelinfopanel.ChannelInfoPanel.java-recordStream.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=i;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=col;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7295/pattern-ver1-serial/src.android.SunmiPrinter.java-printTask.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1||getNumObjectiveFunctions()==Long.MIN_VALUE){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||getBasicRow(col)==Long.MIN_VALUE){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+columnsToDrop.add(0);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)+" votes");
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+if(getNumObjectiveFunctions()==12){
+return ;
+}else {
 if(getNumObjectiveFunctions()==1){
 return ;
+}
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=10;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:28:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)-1);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove("There was a problem with the call to ManyWho: "+(int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)*-1);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove(new BigDecimal((int)columnsToDrop.get(i)).setScale(2,RoundingMode.HALF_UP));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=j;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(columnsToDrop!=null){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/2504/pattern-ver1-serial/app.src.main.java.com.projectmanagement.benson.homeinventoryapp.Models.List.java-setKeys.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
-columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+columnsToDrop.add(i);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
 for(int j=0;j<getWidth();j++){
+int col=0;
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
-int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+int col=0;
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2943/pattern-ver1-serial/hadoop.order_inversion.src.main.java.org.mdp.learn.hadoop.order_inversion.pairs.CoOccurrenceMatrixMapperWithPairs.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=100;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)Math.max(i,1));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)*1000);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(columnsToDrop.size()==1){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2574/pattern-ver1-serial/src.main.java.edu.umich.med.mbni.lkq.cyontology.internal.view.OntologyControlPanel.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)((int)columnsToDrop.get(i)));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+assert (columnsToDrop!=null);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+assert (columnsToDrop!=null);
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+assert (columnsToDrop!=null);
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+assert (columnsToDrop!=null);
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+assert (columnsToDrop!=null);
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+assert (columnsToDrop!=null);
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+assert (columnsToDrop!=null);
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+assert (columnsToDrop!=null);
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+assert (!columnsToDrop.isEmpty());
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+assert (!columnsToDrop.isEmpty());
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+assert (!columnsToDrop.isEmpty());
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+assert (!columnsToDrop.isEmpty());
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+assert (!columnsToDrop.isEmpty());
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+assert (!columnsToDrop.isEmpty());
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+assert (!columnsToDrop.isEmpty());
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+assert (!columnsToDrop.isEmpty());
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
-double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+double[][] matrix=new double[(getWidth()-columnsToDrop.size())][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=0.0;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=i-1+1;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2169/pattern-ver1-serial/src.net.waqassiddiqi.app.crew.ui.ListCrewForm.java-getData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(Double.isNaN(getBasicRow(col))){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)+1);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/689/pattern-ver1-serial/JavaME.MistroFarmer.MistroFarmer.src.org.cgiar.ilri.mistro.farmer.carrier.Cow.java-setDateOfBirth.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null==true){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)==true){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop!=null){
+columnsToDrop.add(i);
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop!=null){
+ final double entry=tableau.getEntry(0,i);
+if(Precision.compareTo(entry,0.0,maxUlps)>0){
+columnsToDrop.add(i);
+}
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop!=null){
+columnsToDrop.add(col);
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop!=null){
+int col=i+getArtificialVariableOffset();
+if(getBasicRow(col)==null){
+columnsToDrop.add(col);
+}
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop!=null){
+columnLabels.remove((int)columnsToDrop.get(i));
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove(Math.abs((int)columnsToDrop.get(i)));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+assert (columnsToDrop!=new ArrayList<Integer>());
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+assert (entry!=tableau.getEntry(0,i));
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+assert (col!=i+getArtificialVariableOffset());
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+assert (col!=0);
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove("PATH: \n"+(int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
-for(int i=1;i<getHeight();i++){
 int col=0;
+for(int i=1;i<getHeight();i++){
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove(String.valueOf((int)columnsToDrop.get(i)));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+this.numArtificialVariables++;
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+this.numArtificialVariables++;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+this.numArtificialVariables++;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+this.numArtificialVariables++;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+this.numArtificialVariables++;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+this.numArtificialVariables++;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+this.numArtificialVariables++;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+this.numArtificialVariables++;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=-1;
+this.numArtificialVariables++;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=(tableau.getEntry(i,j)/1000);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove((int)columnsToDrop.get(i)+"/logout");
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
-columnLabels.remove((int)columnsToDrop.get(i));
+columnLabels.remove("\nDealer has: \n"+(int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1959/pattern-ver1-serial/LowcostAvia.src.main.java.com.epam.lowcost.command.RegisterCommand.java-action.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+assert (columnsToDrop!=null);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+assert (columnsToDrop!=null);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+assert (columnsToDrop!=null);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+assert (columnsToDrop!=null);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+assert (columnsToDrop!=null);
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+assert (columnsToDrop!=null);
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+assert (columnsToDrop!=null);
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j)+1;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||"查看红包".equals(getBasicRow(col))){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1||"查看红包".equals(getNumObjectiveFunctions())){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1||getNumObjectiveFunctions()==3){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||getBasicRow(col)==3){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(columnsToDrop!=null&&!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4226/pattern-ver1-serial/src.main.java.org.walkmod.javalang.walkers.ChangeLogVisitor.java-visit.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()<0||getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)<0||getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+this.numArtificialVariables=0;
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+this.numArtificialVariables=0;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+columnsToDrop.remove(columnsToDrop.get(0));
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/5778/pattern-ver1-serial/src.LinkedList.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||getBasicRow(col)==0){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1||getNumObjectiveFunctions()==0){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+if(columnsToDrop.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||getBasicRow(col)>9){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1||getNumObjectiveFunctions()>9){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1&&getNumObjectiveFunctions()<4000000){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null&&getBasicRow(col)<4000000){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null||getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null&&getBasicRow(col)!=9999){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(getNumObjectiveFunctions()==1&&getNumObjectiveFunctions()!=9999){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
-if(getNumObjectiveFunctions()==1){
+if(1>0&&getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+assert (entry>=0):"Receive a negative tratment";
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+assert (col>=0):"Receive a negative tratment";
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)<=0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=Double.MIN_VALUE;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2819/pattern-ver1-serial/src.main.java.quickml.supervised.classifier.decisionTree.TreeBuilder.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+assert (columnsToDrop!=null):"Appointments day is not allowed to be null!";
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+assert (entry!=0):"Receive a size tratment";
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
+if(columnsToDrop.isEmpty()){
+columnsToDrop=null;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(columnsToDrop==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(columnsToDrop==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(tableau==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(col>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(entry>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
+if(columnsToDrop==null){
+columnsToDrop=new ArrayList<>();
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
+if(columnsToDrop==null){
+columnsToDrop=new ArrayList<>();
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop==null){
+columnsToDrop=new ArrayList<>();
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
+if(columnsToDrop==null){
+columnsToDrop=new ArrayList<>();
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(columnsToDrop==null){
+columnsToDrop=new ArrayList<>();
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3179/pattern-ver1-serial/src.dev.televex.memecraftcore.lore.loreapi.java-addLoreLineTop.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+if(matrix[i-1][col++]<0){
+matrix[i-1][col++]=0;
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(matrix[i-1][col++]<0){
+matrix[i-1][col++]=0;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(matrix[i-1][col++]<0){
+matrix[i-1][col++]=0;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+this.numArtificialVariables=0;
+if(this.numArtificialVariables<0){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(col<=0){
+col=1;
+}
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(columnsToDrop!=null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop==null){
+return ;
+}
+if(matrix==null){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop==null){
+return ;
+}
+if(matrix==null){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:37:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+this.tableau=new Array2DRowRealMatrix(matrix);
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+this.tableau=new Array2DRowRealMatrix(matrix);
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+this.tableau=new Array2DRowRealMatrix(matrix);
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+if(columnsToDrop!=null){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V46/1762/pattern-ver1-serial/app.src.main.java.kosbrother.com.doctorguide.SearchableActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,i-1);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i-1,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0-1,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i-1,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0,i-1);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j-1);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
- final double entry=tableau.getEntry(0,i);
+ final double entry=tableau.getEntry(0-1,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j-1);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(columnsToDrop.equals("NAME")){
+return ;
+}
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
+if(columnsToDrop.equals("NAME")){
+return ;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
+if(columnsToDrop.equals("NAME")){
+return ;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
+if(columnsToDrop.equals("NAME")){
+return ;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(columnsToDrop.equals("NAME")){
+return ;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 columnLabels.remove((int)columnsToDrop.get(i));
+if(columnsToDrop.equals("NAME")){
+return ;
+}
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 columnsToDrop.add(i);
+if(columnsToDrop.equals("NAME")){
+return ;
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+if(columnsToDrop.equals("CALL_RECEIVED_AT")){
+return ;
+}
 columnsToDrop.add(col);
+if(columnsToDrop.equals("NAME")){
+return ;
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(this.tableau==null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/2963/pattern-ver1-serial/src.in.tamchow.fractal.fractals.complex.ComplexFractalGenerator.java-initFractal.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+this.numArtificialVariables=0;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+this.numArtificialVariables=0;
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+this.numArtificialVariables=0;
 }
+this.numArtificialVariables=0;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
-if(getBasicRow(col)==null){
+if(getBasicRow(col)==null&&!getBasicRow(col).equals("")){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
-columnsToDrop.add(col);
+columnsToDrop.add(i);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(this.tableau!=null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(this.tableau!=null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3931/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.fetch.OFetchHelper.java-fetchCollectionRidMap.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+if(columnsToDrop!=null){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0||"查看红包".equals(Precision.compareTo(entry,0.0,maxUlps))){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0||Precision.compareTo(entry,0.0,maxUlps)==3){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+columnLabels.remove((int)columnsToDrop.get(i));
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+columnsToDrop.add(0);
+if(columnsToDrop.size()==0){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/7890/pattern-ver1-serial/app.src.main.java.me.anon.lib.helper.MigrationHelper.java-performMigration.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
+if(columnsToDrop.size()==0){
+columnsToDrop.add(0);
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/7890/pattern-ver1-serial/app.src.main.java.me.anon.lib.helper.MigrationHelper.java-performMigration.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)<0||Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(this.numArtificialVariables!=0){
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(true){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0==false){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0||Precision.compareTo(entry,0.0,maxUlps)==Long.MIN_VALUE){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+if(getBasicRow(col)==12){
+return ;
+}else {
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+}
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0||Precision.compareTo(entry,0.0,maxUlps)==0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0||Precision.compareTo(entry,0.0,maxUlps)>9){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(this.numArtificialVariables!=0){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
+columnLabels.remove((int)columnsToDrop.get(i));
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
+matrix[i-1][col++]=tableau.getEntry(i,j)*2;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
+this.numArtificialVariables=0*2;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0&&Precision.compareTo(entry,0.0,maxUlps)<4000000){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Double.isNaN(Precision.compareTo(entry,0.0,maxUlps))){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0==true){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(Precision.compareTo(entry,0.0,maxUlps)>0&&Precision.compareTo(entry,0.0,maxUlps)!=9999){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
-if(Precision.compareTo(entry,0.0,maxUlps)>0){
+if(0>0&&Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
+if(matrix==null){
+throw new IllegalStateException("User isn't registered! "+columnsToDrop);
+}
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+if(getBasicRow(col)==null){
+columnsToDrop.add(col);
+}
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
+if(this.tableau!=new Array2DRowRealMatrix(matrix)){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(columnsToDrop!=null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+if(columnsToDrop!=null){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+haveBreadCrumbs=true;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+haveBreadCrumbs=true;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+haveBreadCrumbs=true;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
+haveBreadCrumbs=true;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
+haveBreadCrumbs=true;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+haveBreadCrumbs=true;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+boolean haveBreadCrumbs=false;
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
+if(!columnsToDrop.contains(j)&&haveBreadCrumbs){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+haveBreadCrumbs=true;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
+if(Precision.compareTo(entry,0.0,maxUlps)==12){
+return ;
+}else {
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
+}
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop!=null){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
-this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+synchronized(this){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
+if(columnsToDrop!=null){
 columnsToDrop.add(0);
+}
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
-this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1328/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(matrix[i]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+columnsToDrop.getClass().getName());
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
+if(matrix[i]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+columnsToDrop.getClass().getName());
+}
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
+if(matrix[j]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+columnsToDrop.getClass().getName());
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+if(columnsToDrop.size()>0){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+}
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4773/pattern-ver1-serial/GUI.src.main.block.DraggableRect.java-setChild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
-matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
-if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
+if(!columnsToDrop.contains(j)){
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+matrix[i-1][col++]=tableau.getEntry(i,j);
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
+long startTime=System.currentTimeMillis();
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
+long startTime=System.currentTimeMillis();
 columnsToDrop.add(i);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
+long startTime=System.currentTimeMillis();
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
+long startTime=System.currentTimeMillis();
 columnsToDrop.add(col);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
+long startTime=System.currentTimeMillis();
 columnLabels.remove((int)columnsToDrop.get(i));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
+long startTime=System.currentTimeMillis();
 matrix[i-1][col++]=tableau.getEntry(i,j);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
+long startTime=System.currentTimeMillis();
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
+long startTime=System.currentTimeMillis();
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
+long startTime=System.currentTimeMillis();
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
+if(tableau!=null){
 this.tableau=new Array2DRowRealMatrix(matrix);
+}
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
 columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
+if(tableau!=null){
 this.numArtificialVariables=0;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 3, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[323,367]
------------Candidate---------------
 protected void dropPhase1Objective(){
 if(getNumObjectiveFunctions()==1){
 return ;
 }
 List<Integer> columnsToDrop=new ArrayList<Integer>();
-columnsToDrop.add(0);
 for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
  final double entry=tableau.getEntry(0,i);
 if(Precision.compareTo(entry,0.0,maxUlps)>0){
 columnsToDrop.add(i);
 }
 }
 for(int i=0;i<getNumArtificialVariables();i++){
 int col=i+getArtificialVariableOffset();
 if(getBasicRow(col)==null){
 columnsToDrop.add(col);
 }
 }
 double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
 for(int i=1;i<getHeight();i++){
 int col=0;
 for(int j=0;j<getWidth();j++){
 if(!columnsToDrop.contains(j)){
 matrix[i-1][col++]=tableau.getEntry(i,j);
 }
 }
 }
 for(int i=columnsToDrop.size()-1;i>=0;i--){
 columnLabels.remove((int)columnsToDrop.get(i));
 }
 this.tableau=new Array2DRowRealMatrix(matrix);
 this.numArtificialVariables=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 11, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 02:44:08 CDT
--------------- END -----------------
Location : org.apache.commons.math3.optimization.linear.SimplexTableau.createTableau:[226, 199, 215, 224, 188, 225, 232, 233, 234, 181, 183, 184, 187, 190, 191, 192, 194, 195, 198, 204, 205, 206, 207, 208, 211, 214, 220, 223, 230, 238]#0.2773500981126146
Compute Candidate : 2019.09.06 AD at 02:45:08 CDT - 2019.09.06 AD at 03:10:31 CDT , PNumber : 3425, CandNumber : 295 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
-int slackVar=0;
+ int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
-int artificialVar=0;
+ int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if((constraint.getRelationship()==Relationship.EQ)&&(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()==0)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()==0){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+return null;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+return null;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+return null;
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+return null;
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+return null;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
+return null;
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+return null;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
-return matrix;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0;i<=constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
+import java.util.Collection;
+
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0,myUid;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0;i>constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0,MAX_SERVICE_NODES;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+break;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+break;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+break;
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+break;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+break;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
-matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
+matrix.setEntry(zIndex,height-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
-matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
+matrix.setEntry(zIndex,zIndex-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
+break;
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()<=2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()<=1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+matrix.setEntry(row,getSlackVariableOffset()-slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()-slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()-artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
-matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+matrix.setEntry(row,getArtificialVariableOffset()-artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables-numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables-numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables+numArtificialVariables-getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+matrix.setEntry(row,getSlackVariableOffset()+slackVar--,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()+slackVar--,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
-matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+matrix.setEntry(row,getArtificialVariableOffset()+artificialVar--,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0;i<constraints.size();i--){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+row,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+height,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+zIndex,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+width,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+i,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+slackVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
-copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
+copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[0]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
-copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[0]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4175/pattern-ver1-serial/common-gui.src.main.java.org.drugis.common.gui.FileDialog.java-wrapExtensions.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()>=2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()>=1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+1,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+int row=getNumObjectiveFunctions()+1;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+int height=constraints.size()+1;
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
-copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
+copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[1]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
-copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[1]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()!=1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()!=2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(constraint.getRelationship()!=Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint.getRelationship()!=Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if((constraint.getRelationship()!=Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()!=Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+Integer width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
-int slackVar=0;
+Integer slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+Integer zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
-int artificialVar=0;
+Integer artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+Integer row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+Integer height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+3,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+3+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables+3+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables+numArtificialVariables+3+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
-return matrix;
+return createTableau(false);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4268/pattern-ver1-serial/library.src.main.java.com.mbientlab.metawear.impl.DefaultMetaWearBoard.java-fromSensor.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final int height=constraints.size()+getNumObjectiveFunctions();
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ LinearConstraint constraint=constraints.get(i);
+ int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
-int slackVar=0;
+ int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
-int artificialVar=0;
+ int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ final int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
-matrix.setEntry(0,0,-1);
+setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
-matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
+import java.util.Iterator;
+
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()==-1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
+import java.util.Iterator;
+
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()==-1){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+slackVar++;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+slackVar++;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+slackVar++;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+artificialVar++;
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+slackVar++;
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+artificialVar++;
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
+slackVar++;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
+artificialVar++;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+row++;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
-if(!restrictToNonNegative){
+if(!!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
-if(!restrictToNonNegative){
+if(!!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+artificialVar++;
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+row++;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+zIndex++;
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+row++;
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+row++;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+row++;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+i++;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+i++;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+artificialVar++;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+artificialVar++;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+i++;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+matrix.setEntry(row,getSlackVariableOffset()+1,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()+1,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
-matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+matrix.setEntry(row,getArtificialVariableOffset()+1,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+matrix.setEntry(row,getSlackVariableOffset()+3,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()+3,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
-matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+matrix.setEntry(row,getArtificialVariableOffset()+3,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
-if(!restrictToNonNegative){
+if(true){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
-if(!restrictToNonNegative){
+if(true){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+slackVar--;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+slackVar--;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+row--;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+row--;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+zIndex--;
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+slackVar--;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+artificialVar--;
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+row--;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+row--;
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+row--;
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
-for(int i=0;i<constraints.size();i++){
+for(int i=0;i<constraints.size();i++,Charset.forName("UTF-8")){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(matrix!=null){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
+if(matrix!=null){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+}
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
+if(matrix!=null){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+}
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
+if(matrix!=null){
 matrix.setEntry(0,0,-1);
+}
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
+if(matrix!=null){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+}
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+if(constraint==null){
+continue;
+}
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(constraint==null){
+continue;
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
+if(constraint==null){
+continue;
+}
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+}
+if(constraint==null){
+continue;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ final LinearConstraint constraint=constraints.get(i);
+ final int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ final LinearConstraint constraint=constraints.get(i);
+ final int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ final LinearConstraint constraint=constraints.get(i);
+ final int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ final Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ final RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ final int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ final int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ final LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
-copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
+copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex-1]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
-copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row-1]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ @SuppressWarnings("UnusedAssignment") int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ @SuppressWarnings("UnusedAssignment") int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ @SuppressWarnings("UnusedAssignment") RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ @SuppressWarnings("UnusedAssignment") int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ @SuppressWarnings("UnusedAssignment") int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+ @SuppressWarnings("UnusedAssignment") int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+ @SuppressWarnings("UnusedAssignment") int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+ @SuppressWarnings("UnusedAssignment") int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ @SuppressWarnings("UnusedAssignment") RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ @SuppressWarnings("UnusedAssignment") int height=constraints.size()+getNumObjectiveFunctions();
+ @SuppressWarnings("UnusedAssignment") Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
-Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+ @SuppressWarnings("UnusedAssignment") Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ @SuppressWarnings("UnusedAssignment") RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
-RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+ @SuppressWarnings("UnusedAssignment") RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
-LinearConstraint constraint=constraints.get(i);
-int row=getNumObjectiveFunctions()+i;
+ @SuppressWarnings("UnusedAssignment") LinearConstraint constraint=constraints.get(i);
+ @SuppressWarnings("UnusedAssignment") int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(constraint!=null){
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(constraint!=null){
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+matrix.setEntry(row,getSlackVariableOffset()+1+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()+1+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
-matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(0,getArtificialVariableOffset()+1+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
-matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
+matrix.setEntry(row,getArtificialVariableOffset()+1+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
-int height=constraints.size()+getNumObjectiveFunctions();
+int height=constraints.size()+1+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables+1+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+slackVar=slackVar;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+row=row;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+slackVar=slackVar;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+row=row;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()+width==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()+width==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()+height==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
-int zIndex=(getNumObjectiveFunctions()==1)?0:1;
+int zIndex=(getNumObjectiveFunctions()+height==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
+if(i==4){
+continue;
+}
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+if(i==4){
+continue;
+}
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(true){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()==2==false){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(constraint==null){
+return null;
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(matrix==null){
+return null;
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(matrix==null){
+return null;
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
+if(matrix==null){
+return null;
+}
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
+if(matrix==null){
+return null;
+}
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
+if(matrix==null){
+return null;
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+if(objectiveCoefficients==null){
+return null;
+}
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+if(constraint==null){
+return null;
+}
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+if(matrix==null){
+return null;
+}
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(matrix==null){
+return null;
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
+if(matrix==null){
+return null;
+}
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+if(width==numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1){
+return matrix;
+}
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(constraint.getRelationship().equals(Relationship.GEQ)){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint.getRelationship().equals(Relationship.LEQ)){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(Relationship.GEQ.equals(constraint.getRelationship())){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7020/pattern-ver1-serial/simulator.src.main.java.com.hazelcast.simulator.protocol.connector.AbstractServerConnector.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(Relationship.LEQ.equals(constraint.getRelationship())){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7020/pattern-ver1-serial/simulator.src.main.java.com.hazelcast.simulator.protocol.connector.AbstractServerConnector.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+if(constraint==null){
+return null;
+}
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(constraint==null){
+return null;
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+if("&null".equals(maximize)){
+return null;
+}
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
+if("&null".equals(matrix)){
+return null;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if("&null".equals(matrix)){
+return null;
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
+if("&null".equals(slackVar)){
+return null;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
+if("&null".equals(constraint)){
+return null;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
+if("&null".equals(row)){
+return null;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if("&null".equals(slackVar)){
+return null;
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if("&null".equals(row)){
+return null;
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+if("&null".equals(matrix)){
+return null;
+}
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+if("&null".equals(matrix)){
+return null;
+}
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+}
+if(constraint==null){
+return null;
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
+if(constraint==null){
+return null;
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(true){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(true){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(constraint.getRelationship()==Relationship.GEQ==false){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint.getRelationship()==Relationship.LEQ==false){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(constraint.getRelationship()==Relationship.GEQ||"查看红包".equals(constraint.getRelationship())){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()==2||"查看红包".equals(getNumObjectiveFunctions())){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint.getRelationship()==Relationship.LEQ||"查看红包".equals(constraint.getRelationship())){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()==2||getNumObjectiveFunctions()==3){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
-if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint!=null&&constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
+if(constraint!=null&&constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
-if(getNumObjectiveFunctions()==2){
+if(getNumObjectiveFunctions()<0||getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
+synchronized(this){
 matrix.setEntry(0,0,-1);
+}
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(matrix==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(matrix==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(constraint==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(slackVar>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(row>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(slackVar>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(row>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
+if(slackVar<=0){
+slackVar=1;
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(slackVar<=0){
+slackVar=1;
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+if(row<=0){
+row=1;
+}
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
+if(row<=0){
+row=1;
+}
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
-int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
+int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(0,0,-1);
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
+if(objectiveCoefficients==null){
+throw new IllegalStateException("User isn't registered! "+maximize);
+}
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+if(matrix==null){
+throw new IllegalStateException("User isn't registered! "+width);
+}
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
+if(matrix==null){
+throw new IllegalStateException("User isn't registered! "+height);
+}
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
+synchronized(this){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+}
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
+synchronized(this){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
+}
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
-copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)||"查看红包".equals((constraint.getRelationship()==Relationship.EQ))){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+synchronized(this){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
+synchronized(this){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+}
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if(!(constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
+matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
-matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if(true){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
-if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)==false){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
-if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(constraint.getRelationship()==Relationship.GEQ){
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(width==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(width==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(height==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(height==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(zIndex==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(zIndex==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(slackVar==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(slackVar==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(artificialVar==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(artificialVar==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
+if(i==3){
+System.out.println("debug");
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+if(i==3){
+System.out.println("debug");
+}
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
-if(!restrictToNonNegative){
-matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
-}
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
+if(!restrictToNonNegative){
+matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
+}
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
+if(constraint.getRelationship()==Relationship.GEQ){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+if(constraint.getRelationship()==Relationship.GEQ){
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
 }
 }
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
+synchronized(this){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+}
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 25, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_33_buggy/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java[173,239]
------------Candidate---------------
 protected RealMatrix createTableau(boolean maximize){
 int width=numDecisionVariables+numSlackVariables+numArtificialVariables+getNumObjectiveFunctions()+1;
 int height=constraints.size()+getNumObjectiveFunctions();
 Array2DRowRealMatrix matrix=new Array2DRowRealMatrix(height,width);
 if(getNumObjectiveFunctions()==2){
 matrix.setEntry(0,0,-1);
 }
 int zIndex=(getNumObjectiveFunctions()==1)?0:1;
 matrix.setEntry(zIndex,zIndex,maximize?1:-1);
 RealVector objectiveCoefficients=maximize?f.getCoefficients().mapMultiply(-1):f.getCoefficients();
 copyArray(objectiveCoefficients.toArray(),matrix.getDataRef()[zIndex]);
 matrix.setEntry(zIndex,width-1,maximize?f.getConstantTerm():-1*f.getConstantTerm());
 if(!restrictToNonNegative){
 matrix.setEntry(zIndex,getSlackVariableOffset()-1,getInvertedCoefficientSum(objectiveCoefficients));
 }
 int slackVar=0;
 int artificialVar=0;
 for(int i=0;i<constraints.size();i++){
 LinearConstraint constraint=constraints.get(i);
 int row=getNumObjectiveFunctions()+i;
 copyArray(constraint.getCoefficients().toArray(),matrix.getDataRef()[row]);
 if(!restrictToNonNegative){
 matrix.setEntry(row,getSlackVariableOffset()-1,getInvertedCoefficientSum(constraint.getCoefficients()));
 }
 matrix.setEntry(row,width-1,constraint.getValue());
 if(constraint.getRelationship()==Relationship.LEQ){
 matrix.setEntry(row,getSlackVariableOffset()+slackVar++,1);
 }else {
 if(constraint.getRelationship()==Relationship.GEQ){
-matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
-}
-}
 if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
 matrix.setEntry(0,getArtificialVariableOffset()+artificialVar,1);
 matrix.setEntry(row,getArtificialVariableOffset()+artificialVar++,1);
 matrix.setRowVector(0,matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
+}
+matrix.setEntry(row,getSlackVariableOffset()+slackVar++,-1);
+}
 }
 }
 return matrix;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 0, INS : 1, DEL : 34
Failing Tests:[org.apache.commons.math3.optimization.linear.SimplexSolverTest::testMath781]
---------START : 2019.09.05 AD at 22:09:44 CDT
---------TIME : 2019.09.06 AD at 03:10:31 CDT
--------------- END -----------------
Finish : math-33 > patch : 0 | Start : Thu Sep 05 22:09:44 CDT 2019 | End : 2019.09.06 AD at 03:10:31 CDT
