Repair : math_22
Current failed test : org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive | 2019.09.05 AD at 02:06:22 CDT
Location : org.apache.commons.math3.distribution.UniformRealDistribution.isSupportUpperBoundInclusive:[184]#1.0
Compute Candidate : 2019.09.05 AD at 02:08:19 CDT - 2019.09.05 AD at 02:11:27 CDT , PNumber : 11412, CandNumber : 8 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Solution---------------
+import java.util.Collections;
+
 public boolean isSupportUpperBoundInclusive(){
-return false;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
-return false;
+return this.isSupportUpperBoundInclusive();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
+this.isSupportUpperBoundInclusive();
 return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
-return false;
+return (boolean)(false);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
+int a=0;
 return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
+String OUTSTRING="";
 return false;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
+int a=1;
 return false;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[182,185]
------------Candidate---------------
 public boolean isSupportUpperBoundInclusive(){
+boolean b=true;
 return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:13:37 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.UniformRealDistribution.density:[109, 112]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 02:15:04 CDT - 2019.09.05 AD at 02:19:18 CDT , PNumber : 11435, CandNumber : 65 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x>=upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<=lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower&&x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return (1)/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x>lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x<upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x!=upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(upper-2);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(upper-x);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1.0/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x>3){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
-return 0.0;
+return x;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
+x++;
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
+x--;
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<=lower||x>=upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/1893/pattern-ver1-serial/com.eclipsesource.tabris.src.com.eclipsesource.tabris.internal.SwipeManager.java-isValidMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+synchronized(this){
 if(x<lower||x>upper){
 return 0.0;
+}
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/((upper)+lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return (1)+(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3721/pattern-ver1-serial/src.main.java.org.spongepowered.asm.mixin.injection.invoke.ModifyArgInjector.java-injectSingleArgHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
+synchronized(this){
 return 0.0;
+}
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/upper-lower*100;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/2;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x>upper/2){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
+int a=0;
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+int a=0;
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/x;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/upper-lower*5;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
+String OUTSTRING="";
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+String OUTSTRING="";
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(int)(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+double lower=8;
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+double upper=8;
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if(equals(x)){
+return 0d;
+}
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if("Chrome".equals(x)||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
+int a=1;
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+int a=1;
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(double)(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2180/pattern-ver1-serial/src.TextGenerator.java-getUniOcc.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
+boolean b=true;
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+boolean b=true;
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
-return 0.0;
+return 0.0+x;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if("index".equals(x)){
+return 0;
+}
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if(x<0){
+return 0d;
+}
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(this.upper-this.lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/2137/pattern-ver1-serial/DesignPattern.src.builder.SaltWater.java-getWeight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:22:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/((double)upper-(double)lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return density(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return (upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1+1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/5027/pattern-ver1-serial/java.code.core.src.org.specksensor.DataSample.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(upper-lower)+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return x;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if(x<lower||x>upper){
+return 0.0;
+}
+if(1<0){
+return 5;
+}else {
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V10/6358/pattern-ver1-serial/AntGameProject.src.antgameproject.DirectionalInstruction.java-turn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+assert (x>=0):"Receive a negative tratment";
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return (double)(1/(upper-lower));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return (double)1/(double)(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 100;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5846/pattern-ver1-serial/src.com.yy2039.answermachine.MessagesView.java-getKeybackIsCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public double density(double x){
+assert (x!=0):"Receive a size tratment";
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
 return 0.0;
 }
-return 1/(upper-lower);
+return 1/(upper-lower)+x;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5747/pattern-ver1-serial/src.main.java.MySimpleClass.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if(x>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
 if(x<lower||x>upper){
-return 0.0;
-}
 return 1/(upper-lower);
+}
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
+if(x<lower||x>upper){
 if(x<lower||x>upper){
 return 0.0;
 }
 return 1/(upper-lower);
+}
+return 0.0;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/4540/pattern-ver1-serial/core-cube.src.main.java.org.apache.kylin.gridtable.GTScanRangePlanner.java-compare.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x>upper||"查看红包".equals(x<lower)){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower||x>upper||x=='%'){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<0L||(x<lower||x>upper)){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:24:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(true){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[107,113]
------------Candidate---------------
 public double density(double x){
-if(x<lower||x>upper){
+if(x<lower){
 return 0.0;
 }
 return 1/(upper-lower);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:24:08 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.UniformRealDistribution.getSupportUpperBound:[174]#0.5
Compute Candidate : 2019.09.05 AD at 02:25:37 CDT - 2019.09.05 AD at 02:28:30 CDT , PNumber : 11294, CandNumber : 13 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/2193/pattern-ver1-serial/Poker.src.fr.poker.model.Carte.java-compareValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return this.upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return this.getSupportUpperBound();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+this.getSupportUpperBound();
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return (double)(upper);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return 1+upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
-return upper;
+return upper+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+int a=0;
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+String OUTSTRING="";
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+double upper=8;
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:29:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+int a=1;
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:29:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[165,175]
------------Candidate---------------
 public double getSupportUpperBound(){
+boolean b=true;
 return upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:29:07 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.UniformRealDistribution.UniformRealDistribution:[64, 65]#0.23570226039551587
Compute Candidate : 2019.09.05 AD at 02:30:34 CDT - 2019.09.05 AD at 02:35:06 CDT , PNumber : 11294, CandNumber : 18 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+lower++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:35:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+upper++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+lower--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+upper--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+lower=lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+upper=lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+lower=upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+upper=upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+int DEFAULT_INVERSE_ABSOLUTE_ACCURACY=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+boolean DEFAULT_INVERSE_ABSOLUTE_ACCURACY=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[54,65]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(double lower,double upper) throws NumberIsTooLargeException{
 this(lower,upper,DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:37:55 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.UniformRealDistribution.UniformRealDistribution:[77, 78]#0.23570226039551587
Compute Candidate : 2019.09.05 AD at 02:39:20 CDT - 2019.09.05 AD at 02:43:23 CDT , PNumber : 11294, CandNumber : 26 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
-this(new Well19937c(),lower,upper,inverseCumAccuracy);
+this(new Well19937c(null),lower,upper,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
-this(new Well19937c(),lower,upper,inverseCumAccuracy);
+this(new Well19937c(1),lower,upper,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
-this(new Well19937c(),lower,upper,inverseCumAccuracy);
+this(new Well19937c(2),lower,upper,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
-this(new Well19937c(),lower,upper,inverseCumAccuracy);
+this(new Well19937c(1000),lower,upper,inverseCumAccuracy);
 }

PATTERN : /home/jiajun/GithubData/2016/V40/1052/pattern-ver1-serial/src.main.java.net.dv8tion.jda.requests.WebSocketClientV2.java-close.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+lower++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+upper++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+inverseCumAccuracy++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+lower--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+upper--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+inverseCumAccuracy--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+lower=lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+upper=lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+inverseCumAccuracy=lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+lower=upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+upper=upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+inverseCumAccuracy=upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+lower=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+inverseCumAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[67,78]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 this(new Well19937c(),lower,upper,inverseCumAccuracy);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 02:46:38 CDT
--------------- END -----------------
Location : org.apache.commons.math3.distribution.UniformRealDistribution.UniformRealDistribution:[95, 96, 102, 103, 104, 105]#0.22941573387056174
Compute Candidate : 2019.09.05 AD at 02:48:10 CDT - 2019.09.05 AD at 02:58:45 CDT , PNumber : 11412, CandNumber : 89 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=upper;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=inverseCumAccuracy;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=lower;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=inverseCumAccuracy;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=lower;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=0;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=0;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+lower++;
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+upper++;
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+inverseCumAccuracy++;
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+lower++;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+upper++;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+inverseCumAccuracy++;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+lower--;
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+upper--;
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+inverseCumAccuracy--;
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+lower--;
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+synchronized(this){
 this.lower=lower;
+}
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+synchronized(this){
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+synchronized(this){
 this.upper=upper;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1267/pattern-ver1-serial/src.main.java.io.vertx.ext.shell.command.impl.ProcessImpl.java-endHandler.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double bindingModes) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=bindingModes;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/912/pattern-ver1-serial/leshan-core.src.main.java.org.eclipse.leshan.core.request.RegisterRequest.java-RegisterRequest.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double collectorManager) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=collectorManager;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/328/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-server.hadoop-yarn-server-resourcemanager.src.main.java.org.apache.hadoop.yarn.server.resourcemanager.RMActiveServiceContext.java-setRMTimelineCollectorManager.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double parentFileShare) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=parentFileShare;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/5246/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.FileShare.java-setParentFileShare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double Pin) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=Pin;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3652/pattern-ver1-serial/CircuitSimulator.src.main.java.model.NotGate.java-setPin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double newY) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=newY;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/827/pattern-ver1-serial/src.indigo.Entity.Entity.java-setY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double graphdbInput) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=graphdbInput;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6934/pattern-ver1-serial/src.main.java.graph.ItemGraph.java-ItemGraph.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+lower++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+upper++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+inverseCumAccuracy++;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double pScore) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=pScore;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2501/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESQuery.java-setScore.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double pterm) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=pterm;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2712/pattern-ver1-serial/plugins.idea.betterdocsidea.src.main.java.com.imaginea.betterdocs.ESFileContent.java-setTerm.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+synchronized(this){
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
+}
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
-public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
+public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double boid) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=boid;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/6684/pattern-ver1-serial/src.veiw.BoidVeiwer.java-BoidVeiwer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+rng=rng;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+upper=upper;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(true){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=lower*lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=lower*upper;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=lower*inverseCumAccuracy;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=upper*lower;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=upper*upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=upper*inverseCumAccuracy;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*lower;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*upper;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+int a=0;
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+String OUTSTRING="";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+int solverAbsoluteAccuracy=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(Math.abs(lower)>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(Double.isNaN(lower)){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+int LOWER_BOUND_NOT_BELOW_UPPER_BOUND=8;
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+int indexSelection=0;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+int a=1;
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+String LOWER_BOUND_NOT_BELOW_UPPER_BOUND="%#.&f";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+boolean b=true;
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||lower==Long.MIN_VALUE){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+try{
 this.lower=lower;
-this.upper=upper;
+}finally{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
+this.upper=upper;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
+try{
 this.upper=upper;
+}finally{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
+if(solverAbsoluteAccuracy==0){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
+assert (rng!=null);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||"查看红包".equals(lower)){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||lower==3){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+synchronized(this){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
+}
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower<0||lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||lower==0){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||lower>9){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+try{
 this.upper=upper;
+}finally{
+this.lower=lower;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
+try{
 this.lower=lower;
+}finally{
 this.upper=upper;
+}
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
 this.upper=upper;
+try{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}finally{
+this.lower=lower;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+try{
 solverAbsoluteAccuracy=inverseCumAccuracy;
+}finally{
+this.upper=upper;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper&&lower<4000000){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper&&lower!=9999){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(upper>0&&lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+assert (lower>=0):"Receive a negative tratment";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+assert (upper>=0):"Receive a negative tratment";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+assert (lower!=0):"Receive a size tratment";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
+assert (upper!=0):"Receive a size tratment";
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
-if(lower>=upper){
+if(lower>=upper||lower=='"'){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
-this.upper=upper;
+this.lower=lower*2;
+this.upper=upper*2;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=lower*2;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=inverseCumAccuracy*2;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:07:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+this.upper=upper*2;
+solverAbsoluteAccuracy=inverseCumAccuracy*2;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
-this.lower=lower;
+this.lower=Math.pow(10.0,lower/20.0);
 this.upper=upper;
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
-this.upper=upper;
+this.upper=Math.pow(10.0,upper/20.0);
 solverAbsoluteAccuracy=inverseCumAccuracy;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java[80,105]
------------Candidate---------------
 public UniformRealDistribution(RandomGenerator rng,double lower,double upper,double inverseCumAccuracy) throws NumberIsTooLargeException{
 super(rng);
 if(lower>=upper){
 throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,lower,upper,false);
 }
 this.lower=lower;
 this.upper=upper;
-solverAbsoluteAccuracy=inverseCumAccuracy;
+solverAbsoluteAccuracy=Math.pow(10.0,inverseCumAccuracy/20.0);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4345/pattern-ver1-serial/src-gen.com.holycityaudio.SpinCAD.CADBlocks.sixtapCADBlock.java-settap6Gain.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:08:10 CDT
--------------- END -----------------
Location : org.apache.commons.math3.random.AbstractWell.AbstractWell:[72, 73]#0.14433756729740646
Compute Candidate : 2019.09.05 AD at 03:09:35 CDT - 2019.09.05 AD at 03:13:36 CDT , PNumber : 11266, CandNumber : 28 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+k++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m1++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m2++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m3++;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+k--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m1--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m2--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m3--;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:14:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+k=k;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m1=k;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m2=k;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m3=k;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+k=m1;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m1=m1;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m2=m1;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m3=m1;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+k=m2;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m1=m2;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m2=m2;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+m3=m3;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[63,73]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected AbstractWell(int k,int m1,int m2,int m3){
 this(k,m1,m2,m3,null);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:16:56 CDT
--------------- END -----------------
Location : org.apache.commons.math3.random.AbstractWell.setSeed:[155, 156, 154, 159, 161, 162, 163, 164, 168, 169, 170]#0.14433756729740646
Compute Candidate : 2019.09.05 AD at 03:18:21 CDT - 2019.09.05 AD at 03:38:27 CDT , PNumber : 11416, CandNumber : 301 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+return ;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+continue;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+return ;
 }
+return ;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(seed!=null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;index<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;v[i]<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:38:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<=v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<=v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.Collection;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,myUid;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,DEFAULT_TIMEOUT2;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length>v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i>v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,MAX_SERVICE_NODES;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,MAX_ZK_WAIT_RETRY_TIMES;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+break;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))-i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)-0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+v[i])&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+l)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+index)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/1162/pattern-ver1-serial/Android.C4.app.src.main.java.projectc4.c4.client.GameGridView.java-dropPowerup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[1]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,localLevel;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,index;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ final int l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4971/pattern-ver1-serial/SmartReceiptsLibrary.src.main.java.co.smartreceipts.android.persistence.DatabaseHelper.java-updateDistanceHelper.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=2;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+System.arraycopy(seed,0,v,0,Math.max(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4024/pattern-ver1-serial/MPChartLib.src.main.java.com.github.mikephil.charting.charts.BarLineChartBase.java-getLowestVisibleX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;++i,new ArrayList<KeyBinding>()){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+setSeed(System.nanoTime()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6083/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.item.MissionItemProxy.java-MissionItemProxy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[index]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1576/pattern-ver1-serial/src.wyil.io.WyilFileReader.java-readTypePool.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^((l)>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7318/pattern-ver1-serial/src.main.java.crackingthecode.part4additionalreviewproblems.Chapter19Moderate.java-getMax2.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*((l)^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7318/pattern-ver1-serial/src.main.java.crackingthecode.part4additionalreviewproblems.Chapter19Moderate.java-getMax2.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
+toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,_afterComposeMethodCache;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))>>>i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/542/pattern-ver1-serial/src.core.DNSDB.java-IPToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)>>>0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/542/pattern-ver1-serial/src.core.DNSDB.java-IPToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l>>>(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/542/pattern-ver1-serial/src.core.DNSDB.java-IPToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.List;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,mActions;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&i);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&l);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;++index){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:42:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;++v[i]){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/6403/pattern-ver1-serial/app.src.main.java.in.co.mn.minesweeper.game.GameState.java-validate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)|0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5904/pattern-ver1-serial/src.gameboi.GBRegisters.java-getHL.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&index);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&v[i]);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,mRelationId;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=10;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;--i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3078/pattern-ver1-serial/src.PairCell.java-calculateScore.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=-1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+clear();
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+clear();
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+i++;
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+i++;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index++;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+clear();
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+clear();
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 1, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+index++;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+index++;
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+index++;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+i--;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index--;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+i--;
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i++]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7673/pattern-ver1-serial/src.main.java.org.rapla.storage.dbrm.RemoteOperator.java-getFromId.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+this.v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ final long l=this.v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/2698/pattern-ver1-serial/Ant.src.main.graphics.cells.Cells.java-setCell.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+synchronized(this){
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+synchronized(this){
 index=0;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+setSeed(seed);
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+setSeed(seed);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+setSeed(seed);
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+setSeed(i);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+setSeed(l);
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+try{
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+}finally{
+clear();
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 0, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+if(seed.length<1){
+for(int i=seed.length;i<1;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+synchronized(this){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+}
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+synchronized(this){
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+synchronized(this){
 clear();
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length,continentName,countryCode;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if(equals(seed)){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+if(equals(seed)){
+return ;
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+if(equals(seed)){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if(equals(seed)){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+while(true){
+
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+while(true){
+
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+synchronized(this){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
+}
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+synchronized(this){
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed==null){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(seed==null){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+if(seed==null){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if(seed==null){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed==null){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if(seed==null){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;++i,Charset.forName("UTF-8")){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(seed.equals(null)){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if((int)((1812433253l*(l^(l>>30))+i)&0xffffffffL)!=0){
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+if(0!=0){
 index=0;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if("index".equals(seed)){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if("index".equals(seed)){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if("index".equals(seed)){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if("index".equals(i)){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if("index".equals(l)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if(seed.equals("TIME")){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed.equals("TIME")){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if(seed.equals("TIME")){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if("&null".equals(seed)){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if("&null".equals(seed)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+if("&null".equals(seed)){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if("&null".equals(i)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if("&null".equals(l)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.equals("DATETIME")){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(seed.equals("DATETIME")){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:57:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+if(seed.equals("DATETIME")){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^l>>30*100)+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i-1]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/1847/pattern-ver1-serial/33_CDIO3.src.boundary.GUIHandler.java-askPlayerBuyField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+seed=seed;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ final long l=v[1];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(true){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(true){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ final long l=v[i];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+int a=0;
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+int a=0;
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+int a=0;
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+int a=0;
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed.equals(i)){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(seed.equals(l)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(l==0.0){
+continue;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+String OUTSTRING="";
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+String OUTSTRING="";
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+String OUTSTRING="";
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+String OUTSTRING="";
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+if(seed==null){
+return ;
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+int i=5;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.equals(InputStream.class)){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed.equals(InputStream.class)){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(seed.equals(InputStream.class)){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
+if(seed.equals(InputStream.class)){
+return ;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(Double.isNaN(seed.length)){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^l)+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+if(index==0){
+return ;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(v[i]==0){
+return ;
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+int indexSelection=0;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+int indexSelection=0;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+int indexSelection=0;
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+System.arraycopy(seed,0,v,0,Math.min(Math.max(seed.length,v.length),v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 03:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+System.arraycopy(seed,0,v,0,Math.min(seed.length,Math.max(seed.length,v.length)));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.Arrays;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
- final long l=v[i-seed.length];
+ final long l=v[i-seed.length-1];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.equals("setPackMode")){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
+if(seed.equals("setPackMode")){
+return ;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+clear();
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+clear();
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 2, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+clear();
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+clear();
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 2, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+int a=1;
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+int a=1;
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+int a=1;
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+int a=1;
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+String length="%#.&f";
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+boolean i=true;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+boolean length=true;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+boolean b=true;
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+boolean b=true;
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+boolean b=true;
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+boolean b=true;
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed==null){
+continue;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+for(int i=seed.length;i<v.length;Math.abs(++i)){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if((Thread.currentThread().interrupted())){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if((Thread.currentThread().interrupted())){
+return ;
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+if((Thread.currentThread().interrupted())){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+index=0;
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+index=0;
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+index=0;
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index=0;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
-}
 }
 index=0;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+index=0;
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||seed.length==Long.MIN_VALUE){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+assert (seed!=null);
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+assert (seed!=null);
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+assert (seed!=null);
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if(seed!=null){
+if(seed==null){
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+return ;
+}
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+if(seed.length<v.length){
+for(int i=seed.length;i<v.length;++i){
+ final long l=v[i-seed.length];
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+}
+index=0;
+clear();
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
-for(int i=seed.length;i<v.length;++i){
+if(seed.length<-1){
+for(int i=seed.length;i<-1;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+assert (l!=v[i-seed.length]);
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if(seed.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 @Override public void setSeed(int[] seed){
+if(seed.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index++;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=-1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+index++;
 }
-index=0;
+index=-1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+index++;
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=-1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+index=-1;
+index++;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+assert (seed!=null);
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+assert (seed!=null);
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+assert (seed!=null);
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(seed==null||"查看红包".equals(seed)){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||"查看红包".equals(seed.length)){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||seed.length==3){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*l^(l>>30)*100+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<0||seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||seed.length==0){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(seed.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+if(seed.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||seed.length>9){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length&&seed.length<4000000){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(seed==null||seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*l+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length&&seed.length!=9999){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(v.length>0&&seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+assert (i>=0):"Receive a negative tratment";
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+assert (l>=0):"Receive a negative tratment";
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index=0;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
-}
 }
 index=0;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+index=0;
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+index=0;
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+assert (seed!=null):"Appointments day is not allowed to be null!";
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+assert (seed!=null):"Appointments day is not allowed to be null!";
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+assert (seed!=null):"Appointments day is not allowed to be null!";
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+assert (i!=0):"Receive a size tratment";
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+assert (l!=0):"Receive a size tratment";
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+if(seed.length<v.length||seed.length=='"'){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+if(this==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(v[i]<0){
+v[i]=0;
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+index=0;
+if(index<0){
 index=0;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
+if(index!=0){
 clear();
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+if(index!=0){
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+setSeed(System.currentTimeMillis()+System.identityHashCode(this)-1);
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+setSeed(System.currentTimeMillis()+System.identityHashCode(this)*-1);
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+setSeed(System.currentTimeMillis()+System.identityHashCode(this)*1000);
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+setSeed(System.currentTimeMillis()+System.identityHashCode(this)/2);
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3673/pattern-ver1-serial/src.com.tomclaw.mandarin.mmp.MmpSession.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+if(seed.equals("CALL_RECEIVED_AT")){
+return ;
+}
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.equals("NAME")){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(seed.equals("CALL_RECEIVED_AT")){
+return ;
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(seed.equals("NAME")){
+return ;
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+if(seed.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
+if(seed.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
+if(seed==null&&!seed.equals("")){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
+if(seed.equals("INFO")){
+return ;
+}
+if(seed.equals("UNIT")){
+return ;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(seed.equals("INFO")){
+return ;
+}
+if(seed.equals("UNIT")){
+return ;
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+if(seed.equals("INFO")){
+return ;
+}
+if(seed.equals("UNIT")){
+return ;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+synchronized(this){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
+}
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
-if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+if(seed==null){
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+try{
 clear();
+}finally{
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
+try{
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+}finally{
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+}
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+try{
 index=0;
+}finally{
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
-setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5656/pattern-ver1-serial/Project1.src.com.example.project1.EditTextModified.java-onSelectionChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+boolean succeeded=false;
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+succeeded=true;
 }
 index=0;
+if(!succeeded){
+return ;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+boolean succeeded=false;
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+succeeded=true;
 }
 }
 index=0;
+if(!succeeded){
+return ;
+}
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)(1812433253l*(l^(l>>30))+i*100&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+boolean haveBreadCrumbs=false;
+if(seed.length<v.length&&haveBreadCrumbs){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+haveBreadCrumbs=true;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
-if(seed.length<v.length){
+boolean haveBreadCrumbs=false;
+if(seed.length<v.length&&haveBreadCrumbs){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+haveBreadCrumbs=true;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l+(l^(l>>30))*i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+if(i==3){
+System.out.println("debug");
+}
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+if(i==3){
+System.out.println("debug");
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+if(l==3){
+System.out.println("debug");
+}
+if(l==3){
+System.out.println("debug");
+}
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
+try{
 clear();
+}finally{
+System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 1, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=1;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=-1;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=0;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=i;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=((int)((1812433253l*(l^(l>>30))+i)&0xffffffffL)+i)%i;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=2;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=10;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
+long startTime=System.currentTimeMillis();
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+long startTime=System.currentTimeMillis();
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
+long startTime=System.currentTimeMillis();
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL)+1;
 }
 }
-index=0;
+index=1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=0;
 }
 }
-index=0;
+this.index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/4372/pattern-ver1-serial/src.DataStructures.PriorityQueue.MinPQ.java-MinPQ.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=-1;
+v[i]++;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 12, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
-v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+v[i]=1;
 }
 }
-index=0;
+index=0+1;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/786/pattern-ver1-serial/core.src.com.desitum.castleWars.data.Resources.java-adjustPlayerWizards.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 15, INS : 0, DEL : 1
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
+seed[28]=(byte)0x88;
+seed[29]=0x58;
+seed[30]=0x01;
+seed[31]=0x00;
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+seed[28]=(byte)0x88;
+seed[29]=0x58;
+seed[30]=0x01;
+seed[31]=0x00;
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
+seed[28]=(byte)0x88;
+seed[29]=0x58;
+seed[30]=0x01;
+seed[31]=0x00;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4559/pattern-ver1-serial/src.application.rmi.Serveur.java-getCasePlayed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 6, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 15, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
-index=0;
-clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 15, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
-System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 25, UPD : 15, INS : 0, DEL : 10
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
 if(seed.length<v.length){
+synchronized(this){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 29, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/AbstractWell.java[145,170]
------------Candidate---------------
 @Override public void setSeed(int[] seed){
 if(seed==null){
 setSeed(System.currentTimeMillis()+System.identityHashCode(this));
 return ;
 }
 System.arraycopy(seed,0,v,0,Math.min(seed.length,v.length));
+if(seed.length==12){
+return ;
+}else {
 if(seed.length<v.length){
 for(int i=seed.length;i<v.length;++i){
  final long l=v[i-seed.length];
 v[i]=(int)((1812433253l*(l^(l>>30))+i)&0xffffffffL);
+}
 }
 }
 index=0;
 clear();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 32, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:08:23 CDT
--------------- END -----------------
Location : org.apache.commons.math3.random.AbstractWell.setSeed:[179, 180]#0.14433756729740646
Compute Candidate : 2019.09.05 AD at 04:09:55 CDT - 2019.09.05 AD at 04:14:11 CDT , PNumber : 11265, CandNumber : 0 
Location : org.apache.commons.math3.random.Well19937c.Well19937c:[57, 58]#0.14433756729740646
Compute Candidate : 2019.09.05 AD at 04:15:39 CDT - 2019.09.05 AD at 04:19:07 CDT , PNumber : 11259, CandNumber : 21 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
-super(K,M1,M2,M3);
+super(K,M1,M2,M3,1);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7488/pattern-ver1-serial/src.stratos.game.common.Element.java-setAsDestroyed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
-super(K,M1,M2,M3);
+super(K+1,M1,M2,M3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
-super(K,M1,M2,M3);
+super(K,M1+1,M2,M3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
-super(K,M1,M2,M3);
+super(K,M1,M2+1,M3);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
-super(K,M1,M2,M3);
+super(K,M1,M2,M3+1);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/4700/pattern-ver1-serial/src.main.java.org.javaan.print.GraphPrinter.java-visitVertex.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+int K=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+int M1=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+int M2=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+int M3=5;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+boolean M1=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+boolean M2=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+boolean M3=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+boolean K=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
 public Well19937c(){
 super(K,M1,M2,M3);
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:22:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Well19937c(){
 super(K,M1,M2,M3);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:22:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/random/Well19937c.java[52,58]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public Well19937c(){
 super(K,M1,M2,M3);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:22:08 CDT
--------------- END -----------------
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive | 2019.09.05 AD at 04:22:08 CDT
Location : org.apache.commons.math3.distribution.FDistribution.isSupportLowerBoundInclusive:[275]#1.0
Compute Candidate : 2019.09.05 AD at 04:24:00 CDT - 2019.09.05 AD at 04:27:06 CDT , PNumber : 11413, CandNumber : 8 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Solution---------------
 public boolean isSupportLowerBoundInclusive(){
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
-return true;
+return this.isSupportLowerBoundInclusive();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
+this.isSupportLowerBoundInclusive();
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
-return true;
+return (boolean)(true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
+int a=0;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
+String OUTSTRING="";
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
+int a=1;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/distribution/FDistribution.java[273,276]
------------Candidate---------------
 public boolean isSupportLowerBoundInclusive(){
+boolean b=true;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 04:28:59 CDT
--------------- END -----------------
Location : org.apache.commons.math3.util.FastMath.log:[1107, 1222, 1223, 1224, 1225, 1226, 1229, 1230, 1231, 1232, 1235, 1236, 1237, 1239, 1241, 1242, 1244, 1245, 1246, 1249, 1250, 1251, 1253, 1254, 1255, 1259, 1260, 1268, 1269, 1270, 1324, 1325, 1155, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1106, 1109, 1112, 1123, 1132, 1134, 1154, 1204, 1215, 1217, 1218, 1220, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1308, 1309, 1310, 1311, 1313, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1323, 1328]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 04:30:27 CDT - 2019.09.05 AD at 06:48:22 CDT , PNumber : 8774, CandNumber : 1003 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+ long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+ double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
-double xa=aa;
+ double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
-double xb=ab;
+ double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
- final double numer=bits&0x3ffffffffffL;
+ double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+ int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
-double ya=lnCoef_last[0];
+ double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/6248/pattern-ver1-serial/src.main.java.com.github.games647.scoreboardstats.pvpstats.StatsListener.java-onQuit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>1&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>=0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
-if(hiPrec!=null){
+if(hiPrec==null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
-if(hiPrec!=null){
+if(hiPrec==null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
+return 0d;
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
+return 0d;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
+return 0d;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99&&hiPrec!=null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:49:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return 1;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+long exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-1;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)(bits>>52)-1;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-1;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=epsilon-1;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-1+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+tmp-1;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<=1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+yb=aa-ya+ab;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+aa=numer-xa*denom-xb*denom;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Collection;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,myUid;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,DEFAULT_TIMEOUT2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0&&x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1&&exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>3&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/925/pattern-ver1-serial/Group_Project_Bork.CommandFactory.java-parse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+double exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/3073/pattern-ver1-serial/src.mlsp.cs.cmu.edu.tmm.TMMAlphaPosterior.java-alphaSum.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=(aa)/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x>1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,MAX_SERVICE_NODES;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,MAX_ZK_WAIT_RETRY_TIMES;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0||x==x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)==0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=tmp-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=x-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=aa-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=exp-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/6021/pattern-ver1-serial/src.org.andengine.util.algorithm.path.astar.ManhattanHeuristic.java-getExpectedRestCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x<=0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp<=0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)<=0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp<=-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x<=Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+float exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon-tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52-(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52-(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa-tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa-tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=aa-ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya-lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb-lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
-b=b+d;
+b=b-d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:54:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return Integer.MIN_VALUE;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return 3;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/6014/pattern-ver1-serial/src.com.learnit.LearnIt.MainActivity.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x<0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:57:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x>=0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:57:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp>=0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:57:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp>=-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)>=0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x>=Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x!=0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+1-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+1-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya+1;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
-double ya=lnCoef_last[0];
+double ya=lnCoef_last[1];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+lnCoef_i[1];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[1]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
-double c=a+lnm[0];
+double c=a+lnm[1];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+double d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 06:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp!=-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp!=0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)!=0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x!=0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x!=Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
+return 0;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+Integer exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-3;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+3-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+tmp-3;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya+3;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+tmp-3;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya+3;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
-lnza=lnza*epsilon+0.19999954;
+lnza=lnza*epsilon+3;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
 }
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
+}
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+}
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
 }
+return Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+}
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
+return Double.NEGATIVE_INFINITY;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
 }
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
 }
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+return 0;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
+return 0;
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+return 0;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-2];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-2;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=epsilon-2;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)(bits>>52)-2;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,localLevel;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[0]=x;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4596/pattern-ver1-serial/VortexGameEngine.src.vortex.Game.java-setDriver.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=bits-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/3851/pattern-ver1-serial/src.main.java.com.sandagerdi.Operation.java-substraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
+double yb=lnCoef_last[0];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+lnCoef_i[0];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
-hiPrec[1]=b;
+hiPrec[0]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=a+lnm[0];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
- final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+ final double[] lnCoef_i=LN_HI_PREC_COEF[1];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/1721/pattern-ver1-serial/src.util.window.SetFilterDialog.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return Integer.MAX_VALUE;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)<0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0||x<x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+lnCoef_i[2];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
+double yb=lnCoef_last[2];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
-hiPrec[1]=b;
+hiPrec[2]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=a+lnm[2];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-(c-a-lnm[2]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+lnCoef_i[2];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
-double ya=lnCoef_last[0];
+double ya=lnCoef_last[2];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
- final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+ final double[] lnCoef_i=LN_HI_PREC_COEF[2];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[2]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return x;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)>0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x>0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp>0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp>-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x>Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-1+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=-(lnza-1-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=-(c-1-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=-(c-1-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-(c-1-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
-d=-(c-a-lnzb);
+d=-(c-1-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1627/pattern-ver1-serial/src.org.GreenTeaScript.JVM.GtSubProc.java-createSubProc.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==4){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==4){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp==4){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==4){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-bits;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-exp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-epsilon;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0||x>x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)>0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=1.0/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--,new ArrayList<KeyBinding>()){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/4;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0.0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i<=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6317/pattern-ver1-serial/yamj3-filescanner.src.main.java.org.yamj.filescanner.model.Statistics.java-getTime.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
-a=c;
+a=1;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==5){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==5){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp==5){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==5){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Set;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/2.0;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
- final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+ final double[] lnCoef_i=LN_HI_PREC_COEF[0];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2062/pattern-ver1-serial/jkind-common.src.jkind.lustre.values.RatValue.java-truncate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+Long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/3545/pattern-ver1-serial/nifi-nar-bundles.nifi-framework-bundle.nifi-framework.nifi-framework-core.src.main.java.org.apache.nifi.controller.StandardFlowFileQueue.java-summarize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-aa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-xa*denom-aa*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=aa*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=aa*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V34/4880/pattern-ver1-serial/src.main.java.ch.trq.carrera.javapilot.akka.trackanalyzer.TrackAnalyzer.java-calculateDistance.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-2||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
+lnza=-2;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
-lnza=lnza*epsilon+-0.25;
+lnza=lnza*epsilon+-2;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
-lnza=lnza*epsilon+-0.5;
+lnza=lnza*epsilon+-2;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)((bits)>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7318/pattern-ver1-serial/src.main.java.crackingthecode.part4additionalreviewproblems.Chapter19Moderate.java-getMax2.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;i++){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;tmp--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;aa--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;ab--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;xa--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;xb--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;exp--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;ya--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+}
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
 }
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/2067/pattern-ver1-serial/src.io.openems.impl.controller.debuglog.Ess.java-Ess.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[0]=0;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
+if(x>=0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2968/pattern-ver1-serial/src.project4.Critter.java-wrapX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,_afterComposeMethodCache;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+bits-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/6298/pattern-ver1-serial/src.net.fibulwinter.gtd.presentation.NextActionListActivity.java-fillData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+exp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/6298/pattern-ver1-serial/src.net.fibulwinter.gtd.presentation.NextActionListActivity.java-fillData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+epsilon-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/6298/pattern-ver1-serial/src.net.fibulwinter.gtd.presentation.NextActionListActivity.java-fillData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
- final double numer=bits&0x3ffffffffffL;
+ final float numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3173/pattern-ver1-serial/SubgEnumFramework.src.dbg.hadoop.subgenum.twintwig.House.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)(bits>>52)>>>1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/542/pattern-ver1-serial/src.core.DNSDB.java-IPToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/542/pattern-ver1-serial/src.core.DNSDB.java-IPToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+i--;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+xb+=aa/denom;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return -1;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==0||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return log(0);
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+ double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+ int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
-double ya=lnCoef_last[0];
+ double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
-double c=a+lnm[0];
+ double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
-double ya=lnCoef_last[0];
+ double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
- final double numer=bits&0x3ffffffffffL;
+ double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+ double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
-double xa=aa;
+ double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Iterator;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==-1){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Iterator;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp==-1){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Iterator;
+
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==-1){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Iterator;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==-1){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
+tmp++;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
+aa++;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
+ab++;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+xa++;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+xa++;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+ya++;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+yb++;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+aa++;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa++;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ya++;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+yb++;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ya++;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+tmp++;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=(double)aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/2896/pattern-ver1-serial/src.main.java.cz.muni.fi.pv021.reader.MnistLoader.java-loadImages.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+xa--;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+yb--;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+ya--;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+ab--;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa--;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ya--;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+yb--;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ya--;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+tmp--;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-(c-a-2);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==4||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
+if(x!=0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x!=0){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(tmp);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(x);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(aa);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(ab);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(xa);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(xb);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(denom);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+log(numer);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
+lnza=1;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==5||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+long bits=Double.doubleToLongBits((int)(x));
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
+return 0d;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
-return Double.NaN;
+return Double.NEGATIVE_INFINITY;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
-return Double.POSITIVE_INFINITY;
+return Double.NEGATIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+(int)(tmp)-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+(int)(tmp)-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+(int)(lnCoef_i[0]);
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+(int)(lnCoef_i[1]);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+(int)(tmp)-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=aa+(int)(ab);
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp-(int)(tmp);
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
-double c=a+lnm[0];
+double c=a+(int)(lnm[0]);
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
-b=b+d;
+b=b+(int)(d);
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+for(int i=LN_QUICK_COEF.length-2;i>0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/3972/pattern-ver1-serial/src.org.apache.batik.utils.SimpleImageTranscoder.java-updateImage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
+return 0d;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
+return 0d;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+xa++;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
+ya++;
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+yb++;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
-a=c;
+c=x;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+-1-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=a+-1;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+-1-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+-1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+-1-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=aa+-1;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/(int)denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2,continentName,countryCode;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return (double)(Double.NEGATIVE_INFINITY);
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
+log(tmp);
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
+log(aa);
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+log(x);
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+log(x);
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/1987/pattern-ver1-serial/android.app.src.main.java.com.graphhopper.android.MainActivity.java-logUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+3;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=a+3;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp<0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x<0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
+if(x<0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x<0){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
+return 0d;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+return 0d;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
+return 0d;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
+}
+while(true){
+
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+while(true){
+
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+while(true){
+
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--,Charset.forName("UTF-8")){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2385/pattern-ver1-serial/dionysos.src.gr.teilar.dionysos.Dionysos.java-checkHtml.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return log(0);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3256/pattern-ver1-serial/src.main.java.com.rizomm.misys.model.PictureLink.java-getLink.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/377/pattern-ver1-serial/src.kreuzungsSimulation.EventComparator.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
-if(hiPrec!=null){
+if(hiPrec.equals(null)){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
-if(hiPrec!=null){
+if(hiPrec.equals(null)){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-1-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-xa*denom-1;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/3678/pattern-ver1-serial/src.main.java.org.fcrepo.client.FedoraClient.java-getPids.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=0;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(ya*xa!=0){
 aa=ya*xa;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa+tmp-tmp!=0){
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa-ya+ab!=0){
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(aa+tmp-tmp!=0){
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa-ya+ab!=0){
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(aa*HEX_40000000!=0){
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+if(aa*HEX_40000000!=0){
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(ya+lnCoef_i[0]!=0){
 aa=ya+lnCoef_i[0];
+}
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+if(yb+lnCoef_i[1]!=0){
 ab=yb+lnCoef_i[1];
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+if(ya*xb+yb*xa+yb*xb!=0){
 ab=ya*xb+yb*xa+yb*xb;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==null){
+continue;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+if(lnCoef_i==null){
+continue;
+}
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)bits>>52*100-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)(bits&0x000ffc0000000000L*100>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=((bits&0x3ffffffffffL))/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/1686/pattern-ver1-serial/app.src.main.java.com.yatrashare.fragments.PublishRideFragment.java-getPrice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
-lnza=lnza*epsilon;
+lnza=0;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+ @SuppressWarnings("UnusedAssignment") long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+ @SuppressWarnings("UnusedAssignment") int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+ @SuppressWarnings("UnusedAssignment") double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ @SuppressWarnings("UnusedAssignment") double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ @SuppressWarnings("UnusedAssignment") double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ @SuppressWarnings("UnusedAssignment") double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
-double xa=aa;
+ @SuppressWarnings("UnusedAssignment") double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
-double xb=ab;
+ @SuppressWarnings("UnusedAssignment") double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
-double lnza=0.0;
+ @SuppressWarnings("UnusedAssignment") double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
-double lnzb=0.0;
+ @SuppressWarnings("UnusedAssignment") double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+ @SuppressWarnings("UnusedAssignment") double tmp=epsilon*HEX_40000000;
+ @SuppressWarnings("UnusedAssignment") double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return 1+Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return 1+a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/6216/pattern-ver1-serial/src.main.java.controller.graph.GradeShape.java-getScoreFromLocation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=2;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=2;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=2;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+aa=tmp;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+ya=tmp;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+xa=tmp;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+ab=tmp;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=3;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=3;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=3;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+1+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon+tmp+1-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+1+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+1+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+1+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+1+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa+1+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=aa+1+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+1+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
-b=b+d;
+b=b+1+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+xa=xa;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp+x==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return Integer.MIN_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/4813/pattern-ver1-serial/src.main.java.net.openhft.chronicle.wire.BinaryWire.java-code.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return 3;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/6014/pattern-ver1-serial/src.com.learnit.LearnIt.MainActivity.java-getCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=ya;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=ya;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+1;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+1);
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+1+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+yb*xa+1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/688/pattern-ver1-serial/src.it.demo.src.main.java.com.example.demo.Target.java-create.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ final double[] lnCoef_last=LN_HI_PREC_COEF[1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+lnCoef_i[0]=1000;
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+lnCoef_i[1]=1000;
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+3;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+3+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+3+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7749/pattern-ver1-serial/HowOld.src.com.gzfgeh.customview.MyHorizontalScrollView.java-initDatas.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
-if(hiPrec!=null){
+if(true){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
-if(hiPrec!=null){
+if(true){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(true){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(true){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-2-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-xa*denom-2;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*tmp;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*aa;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*x;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*ab;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*xa;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*xb;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*numer;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*bits;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/276/pattern-ver1-serial/src.Body.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=3;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+return Double.NEGATIVE_INFINITY+0.0;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return a+b+0.0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4899/pattern-ver1-serial/src.Point.java-slopeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+Arrays.sort(lnCoef_i);
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ final double[] lnCoef_last=LN_HI_PREC_COEF[0];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return Integer.MAX_VALUE;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/4988/pattern-ver1-serial/hadoop-yarn-project.hadoop-yarn.hadoop-yarn-common.src.main.java.org.apache.hadoop.yarn.util.resource.Resources.java-getMemory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=10;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=10;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=10;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ final double[] lnCoef_last=LN_HI_PREC_COEF[2];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99/2&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
-return ya+yb;
+return tmp;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/4912/pattern-ver1-serial/polly.src.polly.configuration.ConfigurationImpl.java-readInt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
+int a=0;
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+int a=0;
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+int a=0;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+int a=0;
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
+int a=0;
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
+int a=0;
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
+int a=0;
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
+int a=0;
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
+int a=0;
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4922/pattern-ver1-serial/src.de._13ducks.cor.game.PlayersBuilding.java-renderGroundEffect.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)bits>>52*5-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)(bits&0x000ffc0000000000L*5>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=aa;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=aa;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=aa;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=1.0/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/2827/pattern-ver1-serial/common.math.CustomMath.java-nsqrt.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=2;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/2928/pattern-ver1-serial/src.offensive.Communicator.JsonMessage.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
+if(lnza!=lnza*epsilon){
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
+if(lnza!=lnza*epsilon){
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
+if(lnza!=lnza*epsilon){
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
+if(lnza!=lnza*epsilon){
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(aa==0.0){
+continue;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+if(aa==0.0){
+continue;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp==0.0){
+continue;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(tmp==0.0){
+continue;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa==0.0){
+continue;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa==0.0){
+continue;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(ya==0.0){
+continue;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(ya==0.0){
+continue;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+String OUTSTRING="";
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
+String OUTSTRING="";
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
+String OUTSTRING="";
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
+String OUTSTRING="";
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+String OUTSTRING="";
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
+String OUTSTRING="";
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
+String OUTSTRING="";
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+String OUTSTRING="";
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
+String OUTSTRING="";
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+String OUTSTRING="";
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=100;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=100;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=100;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp!=0||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return a;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/6424/pattern-ver1-serial/mail.src.main.java.com.sun.mail.imap.ModifiedSinceTerm.java-hashCode.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
-b=b+d;
+b=b;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=0.0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=0.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=0.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;Math.abs(i)>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
-return ya+yb;
+return aa;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=4;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=4;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=4;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=4;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(Double.isNaN(x)){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(Double.isNaN(x)){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
-lnza=lnza*epsilon;
+lnza=epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
-c=a+lnza;
+c=lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
-c=a+lnzb;
+c=lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
-b=b+d;
+b=d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/3134/pattern-ver1-serial/src.main.java.org.roboswag.components.views.AspectRatioFrameLayout.java-setAspectRatio.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+(int)((bits&0x000ffc0000000000L));
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+bits;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)bits-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if(bits!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if(bits==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)(bits>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=bits/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+bits);
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/2671/pattern-ver1-serial/Project.EncryptaBackend.src.Converter.java-binaryStringToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
-double tmp=epsilon*HEX_40000000;
+double tmp=1.0*epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-1.0*xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer-xa*denom-1.0*xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=1.0*numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1.0*ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=1.0*ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=1.0*ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=1.0*ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+1.0*yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+yb*xa+1.0*yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V46/7751/pattern-ver1-serial/src.main.java.info.debatty.java.stringsimilarity.Cosine.java-norm.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=TWO_POWER_52+-1;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+-1);
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+long bits=Double.doubleToLongBits(Math.abs(x));
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
-for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+for(int i=LN_HI_PREC_COEF.length-2;i>=0;Math.abs(i--)){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.floor(bits&0x000ffc0000000000L)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)Math.floor(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)Math.floor(52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
+double NEGATIVE_INFINITY=8;
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
+double POSITIVE_INFINITY=8;
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+double HEX_40000000=8;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+int indexSelection=0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
+int indexSelection=0;
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
+int indexSelection=0;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
+int indexSelection=0;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
+int indexSelection=0;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+int indexSelection=0;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
+int indexSelection=0;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
+int indexSelection=0;
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
-return a+b;
+return (double)(a+b);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
- final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
+ final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
-double ya=lnCoef_last[0];
+double ya=lnCoef_last[0-1];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
+double yb=lnCoef_last[1-1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya+lnCoef_i[0-1];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb+lnCoef_i[1-1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[0-1]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
-hiPrec[1]=b;
+hiPrec[1-1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
- final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+ final double[] lnCoef_i=LN_HI_PREC_COEF[i-1];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
-double c=a+lnm[0];
+double c=a+lnm[0-1];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Arrays;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+double d=-(c-a-lnm[0-1]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+yb*xa+yb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+yb*xa+yb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/3014/pattern-ver1-serial/app.src.main.java.com.yatrashare.activities.OfferRideActivity.java-onDateSet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+3);
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=ya*xb+yb*xa+3;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp<0||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==null){
+return 0d;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return tmp;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return tmp;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return aa;
+}
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return ab;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return aa;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return ya;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return yb;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(lnCoef_i==LN_HI_PREC_COEF[i]){
+return ya;
+}
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=-1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+if(hiPrec==null){
+return 0d;
+}
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=0;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=0;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=0;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+if("index".equals(x)){
+return 0;
+}
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+if("index".equals(hiPrec)){
+return 0;
+}
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
+if("index".equals(hiPrec)){
+return 0;
+}
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
+if("index".equals(hiPrec)){
+return 0;
+}
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
+if("index".equals(hiPrec)){
+return 0;
+}
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+if("index".equals(x)){
+return 0;
+}
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+if("index".equals(hiPrec)){
+return 0;
+}
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
+if("index".equals(x)){
+return 0;
+}
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
+if("index".equals(hiPrec)){
+return 0;
+}
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
+if("index".equals(hiPrec)){
+return 0;
+}
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=2;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=2;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=3;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=3;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=3;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
-xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+xa=aa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
-xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+xb=ab;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
+if(epsilon<0){
+return 0d;
+}
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
+if(tmp<0){
+return 0d;
+}
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
+if(epsilon<0){
+return 0d;
+}
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(lnCoef_i.equals("-1")){
+return 0d;
+}
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0||x==Long.MIN_VALUE){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==Long.MIN_VALUE){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=10;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=10;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=10;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=yb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=ya;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=a;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6985/pattern-ver1-serial/src.org.broad.igv.track.DataTrack.java-getInViewScores.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=100;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
-c=a+lnm[1];
+c=100;
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=100;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max((bits&0x000ffc0000000000L),1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)Math.max((bits>>52),1)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max(bits&0x000ffc0000000000L,1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max(0x000ffc0000000000L,1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max(42,1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)Math.max(bits>>52,1)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
-int exp=(int)(bits>>52)-1023;
+int exp=(int)Math.max(52,1)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
+assert (hiPrec!=null);
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
+assert (hiPrec!=null);
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+assert (lnCoef_i!=null);
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=0.0;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
+ab=0.0;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
-return ya+yb;
+return Double.NEGATIVE_INFINITY;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4438/pattern-ver1-serial/core.src.in.srain.cube.image.ImageLoadRequest.java-getRequestHeight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=4;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
+if(aa==0){
+return 0d;
+}
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+if(aa==0){
+return 0d;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(ya==0){
+return 0d;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+if(yb==0){
+return 0d;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp==0){
+return 0d;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
+if(lnzb==0){
+return 0d;
+}
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(ab==0){
+return 0d;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
+if(lnzb==0){
+return 0d;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
+if(aa==0){
+return 0d;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=(double)epsilon+(double)tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
-double ab=epsilon-aa;
+double ab=(double)epsilon-(double)aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+assert (lnCoef_i!=LN_HI_PREC_COEF[i]);
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
-if(hiPrec!=null){
+if(hiPrec!=null||"查看红包".equals(hiPrec)){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
-if(hiPrec!=null){
+if(hiPrec!=null||"查看红包".equals(hiPrec)){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0||"查看红包".equals(x)){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||"查看红包".equals(x)){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0||"查看红包".equals((bits&0x7ff0000000000000L))){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0||(bits&0x7ff0000000000000L)==3){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0||x==3){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==3){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=1;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=1;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=1;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=-1;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=-1;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=0;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=0;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)(bits&0x000ffc0000000000L)>>42*100];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/TWO_POWER_52+(bits&0x000ffc0000000000L)*100;
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=-lnza-aa-ab*100;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1028/pattern-ver1-serial/coordinatorsvc.src.main.java.com.emc.storageos.coordinator.client.model.DbConsistencyStatus.java-updateCFProgress.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=2;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=2;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=3;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=3;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x<0||x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x<0||x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)<0||(bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
+hiPrec[0]=Double.NaN;
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if(true){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=(ya*xa+xa)%xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=(aa+tmp-tmp+tmp)%tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=(aa-ya+ab+ab)%ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=(aa+tmp-tmp+tmp)%tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=(aa-ya+ab+ab)%ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
+lnza=(aa+ab+ab)%ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=3;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/101/pattern-ver1-serial/PageRank.PageRank.java-PageRank.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>=0&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0||(bits&0x7ff0000000000000L)==Long.MIN_VALUE){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+hiPrec[0]=Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
-a=c;
+a=c<0?0:c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/1445/pattern-ver1-serial/src.main.java.com.laudandjolynn.csvtools.CsvFile.java-CsvFile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=10;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=10;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if((x<1.01||x=='\'')&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0||x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0||(bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/TWO_POWER_52+(bits&0x000ffc0000000000L)*5;
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)(bits&0x000ffc0000000000L)>>42*5];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=-lnza-aa-ab*5;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0||x>9){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0||(bits&0x7ff0000000000000L)>9){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY||x>9){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.concurrent.Executors;
+
+import java.util.concurrent.ExecutorService;
+
+import java.util.Collections;
+
+import java.util.Map;
+
+import java.util.HashMap;
+
+import java.util.concurrent.TimeUnit;
+
+import java.util.concurrent.LinkedBlockingDeque;
+
+import java.util.ArrayList;
+
+import java.util.Comparator;
+
+import java.util.List;
+
+import java.util.concurrent.BlockingQueue;
+
+import java.util.concurrent.ConcurrentHashMap;
+
+import java.util.concurrent.Semaphore;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/4;
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/777/pattern-ver1-serial/src.java.picard.sam.markduplicates.EstimateLibraryComplexity.java-EstimateLibraryComplexity.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=100;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=100;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max((bits&0x000ffc0000000000L)>>42,1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.max(((bits&0x000ffc0000000000L)>>42),1)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/1206/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.GaussConstraintRestoration.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.Set;
+
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/2.0;
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/6462/pattern-ver1-serial/artifact.src.main.java.com.qmatic.regulator.SecondVersionAlgorithm.java-isQueueLevelLessThanSecondQuarterThreshold.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
+hiPrec[0]=Double.NaN;
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=0.0;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=0.0;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=0.0;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&(bits&0x7ff0000000000000L)<4000000){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0&&x<4000000){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY&&x<4000000){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=4;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=4;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=4;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=-2;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=-2;
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
-d=-(c-a-lnzb);
+d=-2;
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
-if(hiPrec!=null){
+if(hiPrec!=null||hiPrec==null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
-if(hiPrec!=null){
+if(hiPrec!=null||hiPrec==null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if(Double.isNaN((bits&0x7ff0000000000000L))){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
+import java.util.LinkedList;
+
 private static double log(double x,double[] hiPrec){
+Double pcb=new Double(x);
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
-long bits=Double.doubleToLongBits(x);
+long bits=pcb.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
+if(aa<=0){
+return -1;
+}
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(ya<=0){
+return -1;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+if(yb<=0){
+return -1;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp<=0){
+return -1;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(tmp<=0){
+return -1;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+if(aa<=0){
+return -1;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(ab<=0){
+return -1;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
+if(tmp<=0){
+return -1;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
+if(aa<=0){
+return -1;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/2367/pattern-ver1-serial/ikrs.io.ReadLimitInputStream.java-read.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(x==0&&x!=9999){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&(bits&0x7ff0000000000000L)!=9999){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(x==Double.POSITIVE_INFINITY&&x!=9999){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if(0>0&&(bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
+if(0>0&&x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
-if(x==Double.POSITIVE_INFINITY){
+if(Double.POSITIVE_INFINITY>0&&x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.floor((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.floor((bits&0x000ffc0000000000L))];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.floor(0x000ffc0000000000L)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[(int)Math.floor(42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3597/pattern-ver1-serial/src.burlap.behavior.singleagent.vfa.cmac.Tiling.java-ObjectTile.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
-c=a+LN_2_B*exp;
+c=0;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/506/pattern-ver1-serial/MetaChessApp.src.engine.board.ExtendedBoardModel.java-getFurthestPiece.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/(int)(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/6656/pattern-ver1-serial/src.game.Game.java-main.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
+assert (tmp>=0):"Receive a negative tratment";
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
+assert (aa>=0):"Receive a negative tratment";
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
+assert (x>=0):"Receive a negative tratment";
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
+assert (x>=0):"Receive a negative tratment";
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
- final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+ final double denom=(double)TWO_POWER_52+(double)(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=(double)epsilon+tmp-(double)tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/((double)TWO_POWER_52+(double)(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(bits&0x3ffffffffffL)/3;
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(xa>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+if(xa>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(ya>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=0;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=0;
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
-d=-(c-a-lnzb);
+d=0;
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+tmp=aa*HEX_40000000;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
+tmp=aa*HEX_40000000;
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
-double aa=epsilon+tmp-tmp;
+double aa=epsilon-tmp*tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
+ya=aa-tmp*tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=-(c-a*lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/1691/pattern-ver1-serial/src.lib.AutotileGenerator.java-Autotile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+xb+=aa/denom;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+xb+=aa/denom;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+aa=ya*xa;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+tmp=aa*HEX_40000000;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
+if(aa<0){
+aa=0;
+}
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp<0){
+tmp=0;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(tmp<0){
+tmp=0;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
+if(tmp<0){
+tmp=0;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+if(aa<0){
+aa=0;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(ya<0){
+ya=0;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+if(yb<0){
+yb=0;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(ab<0){
+ab=0;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+aa=ya*xa;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+lnza=aa+ab;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=(-(lnza-aa-ab)+lnza)%lnza;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=(-(lnza-aa-ab)+ab)%ab;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=(-(lnza-aa-ab)+aa)%aa;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa<=0){
+aa=1;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa<=0){
+aa=1;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp<=0){
+tmp=1;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(tmp<=0){
+tmp=1;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp>aa){
+tmp=aa;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa>tmp){
+aa=tmp;
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(ab>aa){
+ab=aa;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa>ab){
+aa=ab;
+}
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5173/pattern-ver1-serial/src.com.sbar.rebudget.views.ChartView.java-addPiece.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[1];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/1721/pattern-ver1-serial/src.util.window.SetFilterDialog.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
+if(x<1.01&&x>0.99&&hiPrec==null){
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
+tmp=aa*HEX_40000000;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
+tmp=aa*HEX_40000000;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-c-a-lnm[1]*5;
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=1;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=1;
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
-d=-(c-a-lnzb);
+d=1;
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
-yb=aa-ya+ab;
+yb=aa-ya/2.0+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+double d=-(c-a/2.0-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=-(c-a/2.0-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+double d=-(c-a/2.0-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=-(c-a/2.0-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
-hiPrec[0]=a;
+hiPrec[0]=a*2;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
-hiPrec[1]=b;
+hiPrec[1]=b*2;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
-a=c;
+a=c*2;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
-a=c;
+a=c*2;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
-a=c;
+a=c*2;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
-a=c;
+a=c*2;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
+aa=ya*xa;
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+try{
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+try{
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+try{
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+try{
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+try{
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+try{
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}finally{
+aa=ya*xa;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+try{
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+}finally{
 tmp=aa*HEX_40000000;
+}
+ab=ya*xb+yb*xa+yb*xb;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+try{
 aa=ya+lnCoef_i[0];
+}finally{
+aa=ya*xa;
+}
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+try{
 ab=yb+lnCoef_i[1];
+}finally{
+aa=ya*xa;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+tmp=aa*HEX_40000000;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=lnza;
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
-d=-(c-a-lnzb);
+d=lnzb;
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-2;
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
-double d=-(c-a-lnm[0]);
+double d=-2;
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
- final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
+ final double[] lnm=lnMant.LN_MANT[0];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/1207/pattern-ver1-serial/eclipse.chess.src.main.java.org.rjo.chess.pieces.Pawn.java-checkIfCheck.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=-1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=-1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
+tmp=1;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+aa=1;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=0;
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=-c-a-LN_2_B*exp*5;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2098/pattern-ver1-serial/src.com.wecanteven.Models.Stats.HealthStat.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
-lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
+if(lnza!=-0.16624883){
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
+}
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=1;
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
+ab=yb+lnCoef_i[1];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=-2;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp==0||"查看红包".equals(exp==-1)){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
+if(x!=0.0){
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
+if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
-}
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp==-1||exp==0||exp=='%'){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(exp<0L||(exp==-1||exp==0)){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+ya=aa+tmp-tmp;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+yb=aa-ya+ab;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa!=ya*xa){
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa!=ya*xa){
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+if(aa!=ya*xa){
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+if(aa!=ya*xa){
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if(aa!=ya*xa){
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
+if(aa!=ya*xa){
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+}
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+if(aa!=ya*xa){
 aa=ya+lnCoef_i[0];
+}
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
+if(aa!=ya*xa){
 ab=yb+lnCoef_i[1];
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
-aa=ya*xa;
+if(aa!=ya*xa){
 ab=ya*xb+yb*xa+yb*xb;
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+ya=aa+tmp-tmp;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+yb=aa-ya+ab;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
+if(true){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=(-(c-a-LN_2_B*exp)+exp)%exp;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6203/pattern-ver1-serial/src.unogame.peer.GamePeer.java-getNextInRing.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(tmp!=aa*HEX_40000000){
 aa=ya*xa;
+}
 ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
+boolean haveBreadCrumbs=false;
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&haveBreadCrumbs){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 5, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
+}else {
+hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=1;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6053/pattern-ver1-serial/src.monopoly.Dice.java-throwIt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+try{
 aa=ya*xa;
+}finally{
+ya=aa+tmp-tmp;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+yb=aa-ya+ab;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=exp;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/3957/pattern-ver1-serial/src.com.medha.imagesearch.ImageSearchActivity.java-loadMore.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
-}
-return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=-1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=-1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
- final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
+ final double epsilon=(double)(bits&0x3ffffffffffL)/(double)(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/2453/pattern-ver1-serial/GURPS.src.Character.java-getMovementSpeed.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
-aa=ya+lnCoef_i[0];
+aa=1;
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0||x!=x||"查看红包".equals((bits&0x8000000000000000L)!=0)){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=1;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=-1;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=0;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0||x!=x||x=='%'){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)<0L||((bits&0x8000000000000000L)!=0||x!=x)){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=2;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=3;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=xa;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=xb;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=numer;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+lnzb=-(lnza-aa-ab);
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+lnzb=-(lnza-aa-ab);
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if(true){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=tmp;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=aa;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=x;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=ab;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5310/pattern-ver1-serial/src.main.java.snap.http.BearerAuthenticator.java-authenticate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=10;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=100;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
-lnzb=-(lnza-aa-ab);
+lnzb=-(lnza-aa-ab)*2;
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
-d=-(c-a-lnza);
+d=-(c-a-lnza)*2;
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=0.0;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=4;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
+return Double.POSITIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
-}
-return Double.POSITIVE_INFINITY;
+return Double.NEGATIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
-}
-long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+long bits=Double.doubleToLongBits(x);
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+return Double.NEGATIVE_INFINITY;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
+aa=exp;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/7874/pattern-ver1-serial/jmetal-algorithm.src.main.java.org.uma.jmetal.algorithm.singleobjective.particleswarmoptimization.StandardPSO2007.java-StandardPSO2007.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(ya<0){
+return 0;
+}
+if(ya>=xa){
+return xa-1;
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(yb<0){
+return 0;
+}
+if(yb>=xa){
+return xa-1;
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(xa<0){
+return 0;
+}
+if(xa>=ya){
+return ya-1;
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(xa<0){
+return 0;
+}
+if(xa>=yb){
+return yb-1;
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(ya!=aa+tmp-tmp){
 aa=ya*xa;
+}
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(tmp==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(tmp==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(x==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(x==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(aa==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(aa==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(ab==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(ab==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(xa==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(xa==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(xb==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(xb==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(numer==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(numer==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(denom==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(denom==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+if(exp==3){
+System.out.println("debug");
+}
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+if(exp==3){
+System.out.println("debug");
+}
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
-d=-(c-a-lnm[1]);
+d=-(c-a-lnm[1])*2;
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99&&hiPrec==null||"查看红包".equals(x<1.01&&x>0.99)){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=0;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99&&hiPrec==null||x=='%'){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=2;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=3;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 0, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=xa;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=xa;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(true){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+}else {
+hiPrec[0]=Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(x<1.01&&x>0.99&&hiPrec==null&&x>0){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/3401/pattern-ver1-serial/src.edu.gordian.scopes.Scope.java-toElement.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
+boolean haveBreadCrumbs=false;
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&haveBreadCrumbs){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+haveBreadCrumbs=true;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
+boolean haveBreadCrumbs=false;
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&haveBreadCrumbs){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
+haveBreadCrumbs=true;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
+boolean haveBreadCrumbs=false;
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
+haveBreadCrumbs=true;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&haveBreadCrumbs){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
+boolean haveBreadCrumbs=false;
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
+if((bits&0x7ff0000000000000L)==0&&haveBreadCrumbs){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
+haveBreadCrumbs=true;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 5, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=10;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+}else {
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
 }
+return Double.NaN;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=100;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
-xb+=aa/denom;
+xb+=aa/denom*2;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
-d=-(c-a-LN_2_B*exp);
+d=-(c-a-LN_2_B*exp)*2;
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=0.0;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
-}
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=4;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
-return Double.NEGATIVE_INFINITY;
-}
-long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+if(x==0){
+return Double.NEGATIVE_INFINITY;
 }
+long bits=Double.doubleToLongBits(x);
+if((bits&0x8000000000000000L)!=0||x!=x){
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
+return Double.NEGATIVE_INFINITY;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
-aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+aa=numer-xa*denom-xb*denom;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+aa=numer-xa*denom-xb*denom;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
-}
-}
-if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
 }
-return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
+if(x==Double.POSITIVE_INFINITY){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
+return Double.POSITIVE_INFINITY;
+}
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
-}
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
+}
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
-}
-}
-if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
 }
-return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
+}
+if(x==Double.POSITIVE_INFINITY){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
+return Double.POSITIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
-}
-}
-if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
 }
-return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+if(x==Double.POSITIVE_INFINITY){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
+return Double.POSITIVE_INFINITY;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
+return Double.NEGATIVE_INFINITY;
+}
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
-}
-long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
 }
+long bits=Double.doubleToLongBits(x);
+if((bits&0x8000000000000000L)!=0||x!=x){
+return Double.NEGATIVE_INFINITY;
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
+if((bits&0x8000000000000000L)!=0){
 if(x!=0.0){
-if(hiPrec!=null){
+if(hiPrec!=null&&x!=x){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
+if((bits&0x8000000000000000L)!=0){
+if(x!=0.0&&x!=x){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+ab=ya*xb+yb*xa+yb*xb;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+ab=ya*xb+yb*xa+yb*xb;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
+ab=ya*xb+yb*xa+yb*xb;
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
+lnCoef_i[28]=(byte)0x88;
+lnCoef_i[29]=0x58;
+lnCoef_i[30]=0x01;
+lnCoef_i[31]=0x00;
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+lnCoef_last[28]=(byte)0x88;
+lnCoef_last[29]=0x58;
+lnCoef_last[30]=0x01;
+lnCoef_last[31]=0x00;
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa=Math.round(aa*100.0)/100.0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+tmp=Math.round(tmp*100.0)/100.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa=Math.round(aa*100.0)/100.0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+tmp=Math.round(tmp*100.0)/100.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa=Math.round(aa*100.0)/100.0;
 ab=ya*xb+yb*xa+yb*xb;
+ab=Math.round(ab*100.0)/100.0;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
+tmp=Math.round(tmp*100.0)/100.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
+tmp=Math.round(tmp*100.0)/100.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+ab=Math.round(ab*100.0)/100.0;
 tmp=aa*HEX_40000000;
+tmp=Math.round(tmp*100.0)/100.0;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa=Math.round(aa*100.0)/100.0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
+ya=Math.round(ya*100.0)/100.0;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
+aa=Math.round(aa*100.0)/100.0;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
+yb=Math.round(yb*100.0)/100.0;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/6081/pattern-ver1-serial/src.Calc.java-calcBasicsOfSurvivability.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
+if(exp==-1){
+if(x<1.01&&x>0.99&&hiPrec==null&&exp==0){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 0, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
+}
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
+}
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
+}
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
+}
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 0, INS : 1, DEL : 20
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=-1;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=-1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/446/pattern-ver1-serial/core.src.game.MathAlgorithms.mathQCreator.java-getPathsArray.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=1;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
+ab=1;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3191/pattern-ver1-serial/core.src.incanshift.IncanShift.java-create.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
+}else {
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
+}
+}else {
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
+return Double.NEGATIVE_INFINITY;
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
-if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 24, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
-}
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 29, UPD : 0, INS : 0, DEL : 29
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
-}
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
+if((bits&0x7ff0000000000000L)==0){
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
+return Double.NEGATIVE_INFINITY;
+}
+bits<<=1;
+while((bits&0x0010000000000000L)==0){
+--exp;
+bits<<=1;
+}
+}
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 1, DEL : 29
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
-}
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
+if((bits&0x7ff0000000000000L)==0){
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
+return Double.NEGATIVE_INFINITY;
+}
+bits<<=1;
+while((bits&0x0010000000000000L)==0){
+--exp;
+bits<<=1;
+}
+}
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 1, DEL : 29
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
+if(exp==-1||exp==0){
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
-if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
-double xa=x-1.0;
-double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 1, DEL : 29
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
-return Double.NEGATIVE_INFINITY;
-}
 long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
-if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
-}
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 11, INS : 0, DEL : 53
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
-return Double.NEGATIVE_INFINITY;
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
-double xa=x-1.0;
-double xb=xa-x+1.0;
-double tmp=xa*HEX_40000000;
-double aa=xa+tmp-tmp;
-double ab=xa-aa;
-xa=aa;
-xb=ab;
- final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
-double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
-for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
- final double[] lnCoef_i=LN_QUICK_COEF[i];
-aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-}
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-return ya+yb;
+return Double.NEGATIVE_INFINITY;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 172, UPD : 172, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
-double xa=x-1.0;
-double xb=xa-x+1.0;
-double tmp=xa*HEX_40000000;
-double aa=xa+tmp-tmp;
-double ab=xa-aa;
-xa=aa;
-xb=ab;
- final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
-double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
-for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
- final double[] lnCoef_i=LN_QUICK_COEF[i];
-aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-}
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-return ya+yb;
-}
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 182, UPD : 0, INS : 0, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+}else {
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
 }
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 182, UPD : 182, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
+}
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
-if(x<1.01&&x>0.99&&hiPrec==null){
-double xa=x-1.0;
-double xb=xa-x+1.0;
-double tmp=xa*HEX_40000000;
-double aa=xa+tmp-tmp;
-double ab=xa-aa;
-xa=aa;
-xb=ab;
- final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
-double ya=lnCoef_last[0];
-double yb=lnCoef_last[1];
-for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
- final double[] lnCoef_i=LN_QUICK_COEF[i];
-aa=ya+lnCoef_i[0];
-ab=yb+lnCoef_i[1];
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-}
-aa=ya*xa;
-ab=ya*xb+yb*xa+yb*xb;
-tmp=aa*HEX_40000000;
-ya=aa+tmp-tmp;
-yb=aa-ya+ab;
-return ya+yb;
-}
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
+}
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
+}
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
+}
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
+}
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
+if(x<1.01&&x>0.99&&hiPrec==null){
+double xa=x-1.0;
+double xb=xa-x+1.0;
+double tmp=xa*HEX_40000000;
+double aa=xa+tmp-tmp;
+double ab=xa-aa;
+xa=aa;
+xb=ab;
+ final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
+double ya=lnCoef_last[0];
+double yb=lnCoef_last[1];
+for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+ final double[] lnCoef_i=LN_QUICK_COEF[i];
+aa=ya+lnCoef_i[0];
+ab=yb+lnCoef_i[1];
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+}
+aa=ya*xa;
+ab=ya*xb+yb*xa+yb*xb;
+tmp=aa*HEX_40000000;
+ya=aa+tmp-tmp;
+yb=aa-ya+ab;
+return ya+yb;
+}
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
 }
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
 if(x==0){
 return Double.NEGATIVE_INFINITY;
 }
 long bits=Double.doubleToLongBits(x);
 if((bits&0x8000000000000000L)!=0||x!=x){
 if(x!=0.0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NaN;
 }
 return Double.NaN;
 }
 }
 if(x==Double.POSITIVE_INFINITY){
 if(hiPrec!=null){
 hiPrec[0]=Double.POSITIVE_INFINITY;
 }
 return Double.POSITIVE_INFINITY;
 }
 int exp=(int)(bits>>52)-1023;
 if((bits&0x7ff0000000000000L)==0){
 if(x==0){
 if(hiPrec!=null){
 hiPrec[0]=Double.NEGATIVE_INFINITY;
 }
 return Double.NEGATIVE_INFINITY;
 }
 bits<<=1;
 while((bits&0x0010000000000000L)==0){
 --exp;
 bits<<=1;
 }
 }
 if(exp==-1||exp==0){
+}
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
-}
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 0, INS : 1, DEL : 182
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/math/math_22_buggy/src/main/java/org/apache/commons/math3/util/FastMath.java[1099,1329]
------------Candidate---------------
 private static double log(double x,double[] hiPrec){
-if(x==0){
-return Double.NEGATIVE_INFINITY;
-}
-long bits=Double.doubleToLongBits(x);
-if((bits&0x8000000000000000L)!=0||x!=x){
-if(x!=0.0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NaN;
-}
-return Double.NaN;
-}
-}
-if(x==Double.POSITIVE_INFINITY){
-if(hiPrec!=null){
-hiPrec[0]=Double.POSITIVE_INFINITY;
-}
-return Double.POSITIVE_INFINITY;
-}
-int exp=(int)(bits>>52)-1023;
-if((bits&0x7ff0000000000000L)==0){
 if(x==0){
-if(hiPrec!=null){
-hiPrec[0]=Double.NEGATIVE_INFINITY;
-}
-return Double.NEGATIVE_INFINITY;
-}
-bits<<=1;
-while((bits&0x0010000000000000L)==0){
---exp;
-bits<<=1;
-}
-}
-if(exp==-1||exp==0){
 if(x<1.01&&x>0.99&&hiPrec==null){
 double xa=x-1.0;
 double xb=xa-x+1.0;
 double tmp=xa*HEX_40000000;
 double aa=xa+tmp-tmp;
 double ab=xa-aa;
 xa=aa;
 xb=ab;
  final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_QUICK_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_QUICK_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 return ya+yb;
+}
+}
+long bits=Double.doubleToLongBits(x);
+if((bits&0x8000000000000000L)!=0||x!=x){
+if(x!=0.0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NaN;
+}
+return Double.NaN;
+}
+}
+if(x==Double.POSITIVE_INFINITY){
+if(hiPrec!=null){
+hiPrec[0]=Double.POSITIVE_INFINITY;
+}
+return Double.POSITIVE_INFINITY;
+}
+int exp=(int)(bits>>52)-1023;
+if((bits&0x7ff0000000000000L)==0){
+if(x==0){
+if(hiPrec!=null){
+hiPrec[0]=Double.NEGATIVE_INFINITY;
+}
+return Double.NEGATIVE_INFINITY;
+}
+bits<<=1;
+while((bits&0x0010000000000000L)==0){
+--exp;
+bits<<=1;
+}
 }
+if(exp==-1||exp==0){
+return Double.NEGATIVE_INFINITY;
 }
  final double[] lnm=lnMant.LN_MANT[(int)((bits&0x000ffc0000000000L)>>42)];
  final double epsilon=(bits&0x3ffffffffffL)/(TWO_POWER_52+(bits&0x000ffc0000000000L));
 double lnza=0.0;
 double lnzb=0.0;
 if(hiPrec!=null){
 double tmp=epsilon*HEX_40000000;
 double aa=epsilon+tmp-tmp;
 double ab=epsilon-aa;
 double xa=aa;
 double xb=ab;
  final double numer=bits&0x3ffffffffffL;
  final double denom=TWO_POWER_52+(bits&0x000ffc0000000000L);
 aa=numer-xa*denom-xb*denom;
 xb+=aa/denom;
  final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
 double ya=lnCoef_last[0];
 double yb=lnCoef_last[1];
 for(int i=LN_HI_PREC_COEF.length-2;i>=0;i--){
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
  final double[] lnCoef_i=LN_HI_PREC_COEF[i];
 aa=ya+lnCoef_i[0];
 ab=yb+lnCoef_i[1];
 tmp=aa*HEX_40000000;
 ya=aa+tmp-tmp;
 yb=aa-ya+ab;
 }
 aa=ya*xa;
 ab=ya*xb+yb*xa+yb*xb;
 lnza=aa+ab;
 lnzb=-(lnza-aa-ab);
 }else {
 lnza=-0.16624883;
 lnza=lnza*epsilon+0.19999954;
 lnza=lnza*epsilon+-0.25;
 lnza=lnza*epsilon+0.33333334;
 lnza=lnza*epsilon+-0.5;
 lnza=lnza*epsilon+1.0;
 lnza=lnza*epsilon;
 }
 double a=LN_2_A*exp;
 double b=0.0;
 double c=a+lnm[0];
 double d=-(c-a-lnm[0]);
 a=c;
 b=b+d;
 c=a+lnza;
 d=-(c-a-lnza);
 a=c;
 b=b+d;
 c=a+LN_2_B*exp;
 d=-(c-a-LN_2_B*exp);
 a=c;
 b=b+d;
 c=a+lnm[1];
 d=-(c-a-lnm[1]);
 a=c;
 b=b+d;
 c=a+lnzb;
 d=-(c-a-lnzb);
 a=c;
 b=b+d;
 if(hiPrec!=null){
 hiPrec[0]=a;
 hiPrec[1]=b;
 }
 return a+b;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 183, UPD : 183, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive]
---------START : 2019.09.05 AD at 02:06:22 CDT
---------TIME : 2019.09.05 AD at 07:08:19 CDT
--------------- END -----------------
Finish : math-22 > patch : 2 | Start : Thu Sep 05 02:06:22 CDT 2019 | End : 2019.09.05 AD at 07:08:19 CDT
